{"version":3,"file":"main-DDYu6jOc.js","sources":["../../js/config/config.js","../../index.html?html-proxy&index=0.js","../../js/services/authService.js","../../index.html?html-proxy&index=1.js","../../js/utils/dateUtils.js","../../js/utils/formatUtils.js","../../js/services/mappingService.js","../../js/services/dataService.js","../../js/services/notionService.js","../../js/components/tables.js","../../js/components/dashboard.js","../../js/components/order.js","../../js/components/cashFlow.js","../../js/components/totalSales.js","../../js/script.js"],"sourcesContent":["// Firebase 설정을 export\nexport const firebaseConfig = {\n    apiKey: \"AIzaSyAyhRpZmtfCCa8IajLPUld43o3MIovI85A\",\n    authDomain: \"hejdoohome-dashboard.firebaseapp.com\",\n    databaseURL: \"https://hejdoohome-dashboard-default-rtdb.asia-southeast1.firebasedatabase.app\",\n    projectId: \"hejdoohome-dashboard\",\n    storageBucket: \"hejdoohome-dashboard.appspot.com\",\n    messagingSenderId: \"824702367003\",\n    appId: \"1:824702367003:web:ef829133d3e5f216354fbe\",\n    measurementId: \"G-BD1SEL028K\"\n};\n\n// 전역 변수로만 선언\nwindow.CONFIG = {\n    API: {\n        KEY: 'AIzaSyD1I839Np6CFFysPqwSQlxBDYPiFzguBiM',\n    },\n    SHEETS: {\n        ID: '1DuDFQ9cMU7Wfqc92YOcAK_591eMbEy7COGG9PQJE2JY',\n        RANGES: {\n            CHANNEL: 'channel!A2:E',\n            SMARTSTORE: 'smartstore!A2:P',\n            OHOUSE: 'ohouse!A2:AO',\n            OHOUSE2: 'ohouse2!A2:AO',\n            YTSHOPPING: 'YTshopping!A2:R',\n            MAPPING: 'mapping!A2:F'\n        },\n        CHANNEL_COLUMNS: {\n            PRODUCT: 0,\n            OPTION: 1,\n            SMARTSTORE: 2,\n            OHOUSE: 3,\n            YTSHOPPING: 4\n        }\n    },\n    FIREBASE: firebaseConfig,\n    SALES: {\n        ZERO_SALES_STATUSES: ['취소', '반품', '미결제취소'],\n        CHANNELS: {\n            SMARTSTORE: '스마트스토어',\n            OHOUSE: '오늘의집',\n            YTSHOPPING: '유튜브쇼핑'\n        },\n        DEFAULT_COMMISSION_RATE: 0\n    }\n}; ","\n        import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';\n        import { getAuth } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js';\n        import { \n            getFirestore, \n            collection, \n            doc, \n            getDocs, \n            addDoc, \n            deleteDoc, \n            serverTimestamp,\n            writeBatch,\n            connectFirestoreEmulator,\n            enableIndexedDbPersistence\n        } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js';\n        import { firebaseConfig } from './js/config/config.js';\n\n        // WebChannel 연결 비활성화를 위한 설정 추가\n        const appConfig = {\n            ...firebaseConfig,\n            automaticDataCollectionEnabled: false\n        };\n\n        const app = initializeApp(appConfig);\n        const auth = getAuth(app);\n        const db = getFirestore(app);\n        \n        // 오프라인 지속성 비활성화\n        enableIndexedDbPersistence(db, { synchronizeTabs: false }).catch((err) => {\n            console.warn('오프라인 지속성 비활성화 중 오류:', err);\n        });\n        \n        window.firebase = {\n            auth: auth,\n            getAuth: () => auth,\n            db: db,\n            firestore: {\n                collection: (path) => collection(db, path),\n                doc: (path, id) => doc(db, path, id),\n                getDocs,\n                addDoc,\n                deleteDoc,\n                serverTimestamp,\n                batch: () => writeBatch(db)\n            }\n        };\n    ","import { signInWithEmailAndPassword, onAuthStateChanged, signOut } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-auth.js';\n\nexport class AuthService {\n    constructor() {\n        if (!window.firebase?.auth) {\n            console.error('Firebase Auth가 초기화되지 않았습니다.');\n            return;\n        }\n        \n        this.auth = window.firebase.auth;\n        this.currentUser = null;\n        console.log('AuthService 생성됨');\n    }\n\n    onAuthStateChanged(callback) {\n        if (!this.auth) {\n            console.error('Auth가 초기화되지 않았습니다.');\n            return;\n        }\n        return this.auth.onAuthStateChanged((user) => {\n            this.currentUser = user;\n            callback(user);\n        });\n    }\n\n    getCurrentUser() {\n        return this.currentUser;\n    }\n\n    async signIn(email, password) {\n        if (!this.auth) {\n            throw new Error('Auth가 초기화되지 않았습니다.');\n        }\n        try {\n            const userCredential = await this.auth.signInWithEmailAndPassword(email, password);\n            this.currentUser = userCredential.user;\n            return userCredential;\n        } catch (error) {\n            console.error('로그인 실패:', error);\n            throw error;\n        }\n    }\n\n    async signOut() {\n        if (!this.auth) {\n            throw new Error('Auth가 초기화되지 않았습니다.');\n        }\n        try {\n            await this.auth.signOut();\n            this.currentUser = null;\n        } catch (error) {\n            console.error('로그아웃 실패:', error);\n            throw error;\n        }\n    }\n} ","\n        import { initializeApp } from 'firebase/app';\n        import { AuthService } from './js/services/authService.js';\n\n        // URL에서 이메일과 비밀번호 파라미터 가져오기\n        const urlParams = new URLSearchParams(window.location.search);\n        const email = urlParams.get('email');\n        const password = urlParams.get('password');\n\n        // AuthService 인스턴스 생성\n        const authService = new AuthService();\n\n        // 이메일과 비밀번호가 있으면 자동 로그인 시도\n        if (email && password) {\n            authService.signIn(email, password)\n                .then(user => {\n                    console.log('로그인 성공:', user);\n                    // 로그인 성공 후 처리\n                })\n                .catch(error => {\n                    console.error('로그인 실패:', error);\n                    // 로그인 실패 처리\n                });\n        }\n\n        // 인증 상태 변경 감지\n        authService.onAuthStateChanged(user => {\n            if (user) {\n                console.log('사용자 로그인 상태:', user);\n                // 로그인 상태일 때의 처리\n            } else {\n                console.log('로그아웃 상태');\n                // 로그아웃 상태일 때의 처리\n            }\n        });\n    ","export class DateUtils {\n    static calculateDateRange(period) {\n        const today = new Date();\n        let startDate, endDate;\n\n        switch (period) {\n            case 'today':\n                startDate = endDate = new Date(today.setHours(0, 0, 0, 0));\n                break;\n            case 'yesterday':\n                startDate = endDate = new Date(today.setDate(today.getDate() - 1));\n                startDate.setHours(0, 0, 0, 0);\n                endDate.setHours(23, 59, 59, 999);\n                break;\n            case 'this-week':\n                // 이번 주 월요일 구하기\n                startDate = new Date(today);\n                startDate.setDate(today.getDate() - (today.getDay() === 0 ? 6 : today.getDay() - 1));\n                startDate.setHours(0, 0, 0, 0);\n                // 이번 주 일요일 구하기\n                endDate = new Date(startDate);\n                endDate.setDate(startDate.getDate() + 6);\n                endDate.setHours(23, 59, 59, 999);\n                break;\n            case 'last-week':\n                // 지난 주 월요일 구하기\n                startDate = new Date(today);\n                startDate.setDate(today.getDate() - (today.getDay() === 0 ? 6 : today.getDay() - 1) - 7);\n                startDate.setHours(0, 0, 0, 0);\n                // 지난 주 일요일 구하기\n                endDate = new Date(startDate);\n                endDate.setDate(startDate.getDate() + 6);\n                endDate.setHours(23, 59, 59, 999);\n                break;\n            case 'this-month':\n                startDate = new Date(today.getFullYear(), today.getMonth(), 1);\n                startDate.setHours(0, 0, 0, 0);\n                endDate = new Date(today);\n                endDate.setHours(23, 59, 59, 999);\n                break;\n            case 'last-month':\n                startDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n                startDate.setHours(0, 0, 0, 0);\n                endDate = new Date(today.getFullYear(), today.getMonth(), 0);\n                endDate.setHours(23, 59, 59, 999);\n                break;\n            case 'last-3-months':\n                startDate = new Date(today.getFullYear(), today.getMonth() - 2, 1);\n                startDate.setHours(0, 0, 0, 0);\n                endDate = new Date(today);\n                endDate.setHours(23, 59, 59, 999);\n                break;\n            case 'last-6-months':\n                startDate = new Date(today.getFullYear(), today.getMonth() - 5, 1);\n                startDate.setHours(0, 0, 0, 0);\n                endDate = new Date(today);\n                endDate.setHours(23, 59, 59, 999);\n                break;\n            case 'all':\n                return { startDate: null, endDate: null };\n            default:\n                startDate = new Date(today.getFullYear(), today.getMonth(), 1);\n                startDate.setHours(0, 0, 0, 0);\n                endDate = new Date(today);\n                endDate.setHours(23, 59, 59, 999);\n        }\n\n        return { startDate, endDate };\n    }\n\n    static isWithinRange(date, startDate, endDate) {\n        const targetDate = new Date(date);\n        return targetDate >= startDate && targetDate <= endDate;\n    }\n\n    static formatDate(date) {\n        return date.toLocaleString('ko-KR', {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit'\n        });\n    }\n\n    static filterDataByDateRange(data, startDate, endDate) {\n        if (!startDate || !endDate || !Array.isArray(data)) return [];\n\n        const start = new Date(startDate);\n        start.setHours(0, 0, 0, 0);\n        const end = new Date(endDate);\n        end.setHours(23, 59, 59, 999);\n\n        return data.filter(item => {\n            const itemDate = new Date(item.date);\n            return itemDate >= start && itemDate <= end;\n        });\n    }\n\n    static isCustomDateRange(startDate, endDate) {\n        return startDate && endDate && startDate !== endDate;\n    }\n} ","export class FormatUtils {\n    static formatCurrency(amount) {\n        if (typeof amount !== 'number') {\n            amount = parseFloat(amount) || 0;\n        }\n        \n        return new Intl.NumberFormat('ko-KR', {\n            style: 'currency',\n            currency: 'KRW',\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0\n        }).format(amount);\n    }\n\n    static formatNumber(number) {\n        if (typeof number !== 'number') {\n            number = parseFloat(number) || 0;\n        }\n        \n        return new Intl.NumberFormat('ko-KR', {\n            minimumFractionDigits: 0,\n            maximumFractionDigits: 0\n        }).format(number);\n    }\n\n    static formatPercentage(value) {\n        if (typeof value !== 'number') {\n            value = parseFloat(value) || 0;\n        }\n        \n        return new Intl.NumberFormat('ko-KR', {\n            style: 'percent',\n            minimumFractionDigits: 1,\n            maximumFractionDigits: 1\n        }).format(value / 100);\n    }\n\n    static formatDecimal(number, decimals = 2) {\n        if (typeof number !== 'number') {\n            number = parseFloat(number) || 0;\n        }\n        \n        return new Intl.NumberFormat('ko-KR', {\n            minimumFractionDigits: decimals,\n            maximumFractionDigits: decimals\n        }).format(number);\n    }\n} ","export class MappingService {\n    constructor(dataService) {\n        this.dataService = dataService;\n        this.productMappings = {};\n        this.channelFees = [];\n    }\n\n    createMappingKey(product, option) {\n        const key = `${product}-${option}`;\n        return key;\n    }\n\n    async loadMappingData() {\n        try {\n            const response = await gapi.client.sheets.spreadsheets.values.get({\n                spreadsheetId: CONFIG.SHEETS.ID,\n                range: CONFIG.SHEETS.RANGES.MAPPING\n            });\n\n            if (!response.result || !response.result.values) {\n                throw new Error('매핑 데이터를 찾을 수 없습니다');\n            }\n\n            this.productMappings = {};\n            \n            response.result.values.forEach(row => {\n                if (row.length < 6) return;\n\n                const originalProduct = row[0];\n                const originalOption = row[1];\n                const key = `${originalProduct}-${originalOption}`;\n\n                this.productMappings[key] = {\n                    product: row[2],\n                    option: row[3],\n                    price: parseFloat(row[4]),\n                    cost: parseFloat(row[5])\n                };\n\n            });\n\n            return this.productMappings;\n\n        } catch (error) {\n            console.error('매핑 데이터 로드 실패:', error);\n            throw error;\n        }\n    }\n\n    getMappedProductInfo(originalProduct, originalOption, seller) {\n        if (!originalProduct) {\n            return null;\n        }\n\n        // 원본 옵션이 undefined나 null인 경우 빈 문자열로 처리\n        const cleanedOption = originalOption || '';\n        const key = `${originalProduct}-${cleanedOption}`;\n\n        const mappedInfo = this.productMappings[key];\n        if (mappedInfo) {\n            return {\n                productName: mappedInfo.product,\n                option: mappedInfo.option,\n                price: mappedInfo.price,\n                cost: mappedInfo.cost\n            };\n        }\n\n        return null;\n    }\n\n    getChannelFee(productName, optionName, channel) {\n        try {\n            const channelMapping = this.channelFees.find(mapping => \n                mapping.상품명 === productName && \n                (optionName ? mapping.옵션 === optionName : true)\n            );\n\n            if (channelMapping) {\n                switch(channel) {\n                    case '스마트스토어':\n                        return channelMapping.스마트스토어 || 0;\n                    case '오늘의집':\n                        return channelMapping.오늘의집 || 0;\n                    case '유튜브쇼핑':\n                        return channelMapping.유튜브쇼핑 || 0;\n                    default:\n                        return 0;\n                }\n            }\n            return 0;\n        } catch (error) {\n            console.error('채널 수수료 조회 중 오류:', error);\n            return 0;\n        }\n    }\n\n    // 채널별 데이터 구조에 맞게 매핑 키 생성\n    createMappingKeyFromSheet(row, seller) {\n        let productName, optionName;\n        \n        switch(seller) {\n            case '스마트스토어':\n                productName = row[8];  // I열\n                optionName = row[9];   // J열\n                break;\n            case '오늘의집':\n                productName = row[3];  // D열\n                optionName = row[6];   // G열\n                break;\n            case '오늘의집2':\n                productName = row[5];  // F열\n                optionName = row[8];   // I열\n                break;\n            case '유튜브쇼핑':\n                productName = row[6];  // G열\n                optionName = row[7];   // H열\n                break;\n            default:\n                console.warn('알 수 없는 채널:', seller);\n                return null;\n        }\n\n        if (!productName) {\n            console.warn('상품명을 찾을 수 없습니다:', { seller, row });\n            return null;\n        }\n\n        return this.createMappingKey(productName, optionName || '');\n    }\n} ","import { MappingService } from './mappingService.js';\n\nexport class DataService {\n    constructor() {\n        this.data = null;\n        this.productMappings = {};\n        this.processedData = null;\n        this.channelCommissions = {};\n        this.productChannelCommissions = {};\n        this.ZERO_SALES_STATUSES = CONFIG.SALES.ZERO_SALES_STATUSES;\n        this.spreadsheetId = CONFIG.SHEETS.ID;\n        this.data = [];\n        this.processedData = [];\n        this.channelFees = {};\n        this.defaultCommission = 0;\n        this.currentData = null;\n        \n        // MappingService 초기화\n        this.mappingService = new MappingService(this);\n    }\n\n    async initialize() {\n        try {\n            console.log('DataService 초기화 시작');\n            \n            // Google API 초기화\n            await this.initializeGoogleAPI();\n            \n            // 매핑 데이터 로드\n            await this.initializeMappings();\n            \n            // 채널 수수료 정보 로드\n            await this.loadChannelCommissions();\n            \n            console.log('DataService 초기화 완료');\n            return true;\n        } catch (error) {\n            console.error('DataService 초기화 실패:', error);\n            throw error;\n        }\n    }\n\n    async initializeMappings() {\n        try {\n            this.productMappings = await this.mappingService.loadMappingData();\n            await this.loadChannelCommissions();\n        } catch (error) {\n            console.error('매핑 초기화 중 오류:', error);\n        }\n    }\n\n    getProductMapping(productName, option) {\n        if (!this.mappingService) {\n            console.error('MappingService가 초기화되지 않았습니다');\n            return null;\n        }\n        return this.mappingService.getMapping(productName, option);\n    }\n\n    async initializeGoogleAPI() {\n        try {\n            if (!gapi) {\n                throw new Error('GAPI가 로드되지 않았습니다.');\n            }\n\n            await new Promise((resolve, reject) => {\n                gapi.load('client', {\n                    callback: resolve,\n                    onerror: reject\n                });\n            });\n\n            await gapi.client.init({\n                apiKey: CONFIG.API.KEY,\n                discoveryDocs: ['https://sheets.googleapis.com/$discovery/rest?version=v4']\n            });\n\n            if (!gapi.client.sheets) {\n                throw new Error('Sheets API 초기화 실패');\n            }\n\n            await this.loadChannelCommissions();\n            return true;\n\n        } catch (error) {\n            console.error('Google API 초기화 실패:', error);\n            throw error;\n        }\n    }\n\n    async loadChannelCommissions() {\n        try {\n            const response = await gapi.client.sheets.spreadsheets.values.get({\n                spreadsheetId: this.spreadsheetId,\n                range: CONFIG.SHEETS.RANGES.CHANNEL\n            });\n\n            if (!response.result || !response.result.values) {\n                console.warn('채널 수수료 데이터가 없습니다');\n                return;\n            }\n\n            const rows = response.result.values;\n            \n            // 데이터 처리\n            for (const row of rows) {\n                if (!row || row.length < 5) continue;\n\n                const product = row[CONFIG.SHEETS.CHANNEL_COLUMNS.PRODUCT];\n                if (!product) continue;\n\n                const key = product;\n                this.channelCommissions[key] = {\n                    smartstore: this.parseCommissionRate(row[CONFIG.SHEETS.CHANNEL_COLUMNS.SMARTSTORE]),\n                    ohouse: this.parseCommissionRate(row[CONFIG.SHEETS.CHANNEL_COLUMNS.OHOUSE]),\n                    ytshopping: this.parseCommissionRate(row[CONFIG.SHEETS.CHANNEL_COLUMNS.YTSHOPPING])\n                };\n            }\n\n\n        } catch (error) {\n            console.error('채널 수수료 정보 로드 실패:', error);\n            this.channelCommissions = {};\n            throw error;\n        }\n    }\n\n    parseCommissionRate(value) {\n        if (!value) return CONFIG.SALES.DEFAULT_COMMISSION_RATE;\n        const parsed = parseFloat(value);\n        return isNaN(parsed) ? CONFIG.SALES.DEFAULT_COMMISSION_RATE : parsed;\n    }\n\n    calculateChannelCommission(channel, sales) {\n        const commission = this.channelCommissions[channel];\n        if (!commission) {\n            console.warn(`채널 ${channel}의 수수료 정보가 없습니다.`);\n            return 0;\n        }\n        return (sales * commission.rate) / 100;\n    }\n\n    async loadData(loadType = 'dashboard') {\n        try {\n            if (!gapi.client?.sheets) {\n                throw new Error('Sheets API가 초기화되지 않았습니다.');\n            }\n\n            // 데이터 로딩 시작 로깅\n            console.log('데이터 로딩 시작:', loadType);\n\n            // Promise.all을 사용하여 모든 데이터를 동시에 로드\n            const [smartstoreResponse, ohouseResponse, ohouse2Response, ytshoppingResponse] = await Promise.all([\n                gapi.client.sheets.spreadsheets.values.get({\n                    spreadsheetId: this.spreadsheetId,\n                    range: CONFIG.SHEETS.RANGES.SMARTSTORE\n                }),\n                gapi.client.sheets.spreadsheets.values.get({\n                    spreadsheetId: this.spreadsheetId,\n                    range: CONFIG.SHEETS.RANGES.OHOUSE\n                }),\n                gapi.client.sheets.spreadsheets.values.get({\n                    spreadsheetId: this.spreadsheetId,\n                    range: CONFIG.SHEETS.RANGES.OHOUSE2\n                }),\n                gapi.client.sheets.spreadsheets.values.get({\n                    spreadsheetId: this.spreadsheetId,\n                    range: CONFIG.SHEETS.RANGES.YTSHOPPING\n                })\n            ]);\n\n\n            // 데이터 병합 전 각 채널별 데이터 검증\n            const validateData = (data, channel) => {\n                if (!Array.isArray(data)) {\n                    console.warn(`${channel} 데이터가 배열이 아닙니다`);\n                    return [];\n                }\n                return data.filter(row => row && row.length >= 5);\n            };\n\n            // 각 채널 데이터 처리\n            const smartstoreData = validateData(smartstoreResponse.result?.values, '스마트스토어')\n                .map(row => ({ row, seller: '스마트스토어' }));\n            const ohouseData = validateData(ohouseResponse.result?.values, '오늘의집')\n                .map(row => ({ row, seller: '오늘의집' }));\n            const ohouse2Data = validateData(ohouse2Response.result?.values, '오늘의집')  // seller를 '오늘의집'으로 통일\n                .map(row => ({ row, seller: '오늘의집' }));\n            const ytshoppingData = validateData(ytshoppingResponse.result?.values, '유튜브쇼핑')\n                .map(row => ({ row, seller: '유튜브쇼핑' }));\n\n            // 모든 데이터 병합\n            const combinedData = [\n                ...smartstoreData,\n                ...ohouseData,\n                ...ohouse2Data,\n                ...ytshoppingData\n            ];\n\n            return combinedData;\n\n        } catch (error) {\n            console.error('데이터 로드 실패:', error);\n            throw error;\n        }\n    }\n\n    // 상세 데이터가 필요할 때 호출하는 메서드\n    async loadDetailData() {\n        return this.loadData('detail');\n    }\n\n    async processData(rawData, mode = 'full') {\n        try {\n            if (!Array.isArray(rawData)) {\n                console.warn('유효하지 않은 데이터 형식');\n                return [];\n            }\n\n            const processedData = await Promise.all(rawData.map(async item => {\n                try {\n                    let productName, optionName, quantity, orderNumber, orderDate, customerName, customerContact, orderStatus, sales;\n                    \n                    // 채널별로 상품명과 옵션명 위치가 다름\n                    switch(item.seller) {\n                        case '스마트스토어':\n                            // A~P: 상품주문번호(0), 주문번호(1), 주문일시(2), 주문상태(3), ..., 상품명(8), 옵션정보(9), 수량(10), 구매자명(11)\n                            productName = item.row[8];     // I열 (상품명)\n                            optionName = item.row[9];      // J열 (옵션정보)\n                            quantity = parseInt(item.row[10]) || 0;  // K열 (수량)\n                            orderNumber = item.row[1];     // B열 (주문번호)\n                            orderDate = item.row[2];       // C열 (주문일시)\n                            customerName = item.row[11];    // L열 (구매자명)\n                            customerContact = item.row[12]; // M열 (구매자ID)\n                            orderStatus = item.row[3];     // D열 (주문상태)\n                            sales = parseFloat(item.row[9]) || 0;  // 판매가 정보 없음, 매핑 정보 사용 필요\n                            break;\n                            \n                        case '오늘의집':\n                            // ohouse 시트와 ohouse2 시트 구분\n                            const isOhouse2 = item.row.length >= 40;  // ohouse2는 AO열까지 있음\n                            \n                            if (isOhouse2) {\n                                // A~AO: 주문번호(0), ..., 상품명(5), ..., 옵션명(8), 수량(9), ..., 판매가*수량(21), ..., 주문자명(26), 주문자연락처(27), ..., 주문상태(40)\n                                productName = item.row[5];     // F열 (상품명)\n                                optionName = item.row[8];     // I열 (옵션명)\n                                quantity = parseInt(item.row[9]) || 0;  // J열 (수량)\n                                orderNumber = item.row[0];    // A열 (주문번호)\n                                orderDate = item.row[13];     // N열 (주문결제완료일)\n                                customerName = item.row[26];  // AA열 (주문자명)\n                                customerContact = item.row[27]; // AB열 (주문자 연락처)\n                                orderStatus = item.row[40];   // AO열 (주문상태)\n                                sales = parseFloat(item.row[21]) || 0;  // V열 (판매가 * 수량)\n                            } else {\n                                productName = item.row[3];     // D열 (상품명)\n                                optionName = item.row[6];     // G열 (옵션명)\n                                quantity = parseInt(item.row[8]) || 0;  // I열 (주문수량)\n                                orderNumber = item.row[0];    // A열 (주문번호)\n                                orderDate = item.row[22];     // W열 (주문일)\n                                customerName = item.row[27];  // AB열 (고객명)\n                                customerContact = item.row[29]; // AD열 (연락처)\n                                orderStatus = item.row[40];   // AO열 (주문상태)\n                                sales = parseFloat(item.row[21]) || 0;  // V열 (매출)\n                            }\n                            break;\n                            \n                        case '유튜브쇼핑':\n                            // A~S: 주문번호(0), ..., 주문상품명(6), 주문상품명+옵션(7), 수량(8), 판매가(9), 수령인(10), 수령인휴대전화(11)\n                            productName = item.row[6];     // G열 (주문상품명)\n                            optionName = item.row[7];      // H열 (주문상품명+옵션)\n                            quantity = parseInt(item.row[8]) || 0;  // I열 (수량)\n                            orderNumber = item.row[0];     // A열 (주문번호)\n                            orderDate = item.row[17];      // R열 (발주일)\n                            customerName = item.row[10];    // K열 (수령인)\n                            customerContact = item.row[11]; // L열 (수령인 휴대전화)\n                            orderStatus = '';              // 주문상태 정보 없음\n                            sales = parseFloat(item.row[9]) || 0;  // J열 (판매가)\n                            break;\n                            \n                        default:\n                            console.warn('알 수 없는 판매처:', item.seller);\n                            return null;\n                    }\n\n\n                    // 매핑 정보 조회\n                    const mappedInfo = this.mappingService.getMappedProductInfo(productName, optionName, item.seller);\n\n                    // 매핑된 정보가 있으면 사용, 없으면 원본 데이터 사용\n                    const processedItem = {\n                        date: this.formatDate(orderDate),\n                        seller: item.seller,\n                        orderNumber,\n                        originalProduct: productName,\n                        originalOption: optionName,\n                        mappedProduct: mappedInfo?.product || null,\n                        mappedOption: mappedInfo?.option || null,\n                        quantity,\n                        price: mappedInfo?.price || (sales / quantity),\n                        sales: mappedInfo ? (mappedInfo.price * quantity) : sales,\n                        cost: mappedInfo?.cost || 0,\n                        orderStatus,\n                        customerName,\n                        customerContact,\n                        mappingStatus: mappedInfo?.product ? 'mapped' : 'unmapped'\n                    };\n                    \n\n                    return processedItem;\n                } catch (err) {\n                    console.error('데이터 처리 중 오류:', err, item);\n                    return null;\n                }\n            }));\n\n            const filteredData = processedData.filter(item => item !== null && item.date);\n\n            this.processedData = filteredData;\n            return filteredData;\n\n        } catch (error) {\n            console.error('데이터 처리 중 오류:', error);\n            throw error;\n        }\n    }\n\n    formatDate(dateStr) {\n        if (!dateStr) return '';\n        try {\n            if (typeof dateStr === 'string' && dateStr.length === 8) {\n                const year = dateStr.substring(0, 4);\n                const month = dateStr.substring(4, 6);\n                const day = dateStr.substring(6, 8);\n                return `${year}-${month}-${day}`;\n            }\n            return dateStr;\n        } catch (err) {\n            console.error('날짜 형식 변환 오류:', err);\n            return dateStr;\n        }\n    }\n\n    getProcessedData() {\n        return this.processedData || [];\n    }\n\n    filterDataByDateRange(start, end) {\n        if (!Array.isArray(this.processedData)) {\n            return [];\n        }\n\n        if (!start || !end) {\n            return [];\n        }\n\n        const startDate = new Date(start);\n        const endDate = new Date(end);\n\n        return this.processedData.filter(item => {\n            if (!item.date) {\n                return false;\n            }\n\n            const itemDate = new Date(item.date);\n            return itemDate >= startDate && itemDate <= endDate;\n        });\n    }\n\n    calculateChannelFee(channel, sales) {\n        if (!channel || !sales) return 0;\n        const feeRate = this.channelFees[channel] || this.defaultCommission;\n        return sales * (feeRate / 100);\n    }\n\n    getDefaultCommission() {\n        return this.defaultCommission;\n    }\n\n    async loadChannelFees() {\n        try {\n            const response = await this.gapiClient.sheets.spreadsheets.values.get({\n                spreadsheetId: this.spreadsheetId,\n                range: 'fees!A2:B',\n            });\n\n            const fees = {};\n            response.result.values.forEach(([channel, fee]) => {\n                fees[channel] = parseFloat(fee) || 0;\n            });\n\n            this.channelFees = fees;\n            this.defaultCommission = fees['default'] || 0;\n        } catch (error) {\n            console.error('수수료 정보 로드 중 오류:', error);\n            this.channelFees = {};\n            this.defaultCommission = 0;\n        }\n    }\n\n    setCurrentData(data) {\n        this.currentData = data;\n    }\n\n    getCurrentData() {\n        return this.currentData || [];\n    }\n\n    async processDetailData(rawData) {\n        try {\n            if (!Array.isArray(rawData)) {\n                return [];\n            }\n\n            return rawData.map(row => {\n                const date = this.formatDate(row.orderDate || row.orderPaymentDate);\n                \n                return {\n                    date: date,\n                    seller: row.seller || row.channel || '',\n                    orderNumber: row.orderNumber || '',\n                    productName: row.productName || row.originalProduct || '',\n                    option: row.option || row.optionInfo || row.optionName || '',\n                    quantity: parseInt(row.quantity) || 0,\n                    price: parseFloat(row.price) || 0,\n                    orderStatus: row.orderStatus || row.deliveryStatus || '',\n                    buyerName: row.buyerName || row.customerName || row.orderName || '',\n                    buyerContact: row.buyerContact || row.customerContact || row.orderContact || ''\n                };\n            });\n        } catch (error) {\n            console.error('상세 데이터 처리 중 오류:', error);\n            return [];\n        }\n    }\n\n    async filterDataByPeriod(period) {\n        try {\n            const currentData = this.getCurrentData();\n            if (!currentData || !Array.isArray(currentData)) {\n                return [];\n            }\n\n            const today = new Date();\n            let startDate, endDate;\n\n            switch (period) {\n                case 'today':\n                    startDate = new Date(today.setHours(0, 0, 0, 0));\n                    endDate = new Date(today.setHours(23, 59, 59, 999));\n                    break;\n                case 'yesterday':\n                    startDate = new Date(today.setDate(today.getDate() - 1));\n                    startDate.setHours(0, 0, 0, 0);\n                    endDate = new Date(startDate);\n                    endDate.setHours(23, 59, 59, 999);\n                    break;\n                case 'this-week':\n                    startDate = new Date(today);\n                    startDate.setDate(today.getDate() - (today.getDay() === 0 ? 6 : today.getDay() - 1));\n                    startDate.setHours(0, 0, 0, 0);\n                    endDate = new Date(startDate);\n                    endDate.setDate(startDate.getDate() + 6);\n                    endDate.setHours(23, 59, 59, 999);\n                    break;\n                case 'last-week':\n                    startDate = new Date(today);\n                    startDate.setDate(today.getDate() - (today.getDay() === 0 ? 6 : today.getDay() - 1) - 7);\n                    startDate.setHours(0, 0, 0, 0);\n                    endDate = new Date(startDate);\n                    endDate.setDate(startDate.getDate() + 6);\n                    endDate.setHours(23, 59, 59, 999);\n                    break;\n                case 'this-month':\n                    startDate = new Date(today.getFullYear(), today.getMonth(), 1);\n                    endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0, 23, 59, 59, 999);\n                    break;\n                case 'last-month':\n                    startDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n                    endDate = new Date(today.getFullYear(), today.getMonth(), 0, 23, 59, 59, 999);\n                    break;\n                case 'last-3-months':\n                    startDate = new Date(today.getFullYear(), today.getMonth() - 2, 1);\n                    endDate = new Date(today.setHours(23, 59, 59, 999));\n                    break;\n                case 'last-6-months':\n                    startDate = new Date(today.getFullYear(), today.getMonth() - 5, 1);\n                    endDate = new Date(today.setHours(23, 59, 59, 999));\n                    break;\n                case 'all':\n                    return currentData;\n                default:\n                    return currentData;\n            }\n\n            return currentData.filter(item => {\n                const itemDate = new Date(item.date);\n                return itemDate >= startDate && itemDate <= endDate;\n            });\n\n        } catch (error) {\n            console.error('데이터 필터링 중 오류:', error);\n            return [];\n        }\n    }\n\n    async filterDataByCustomDate(selectedDate) {\n        try {\n            const currentData = this.getCurrentData();\n            \n            if (!currentData || !Array.isArray(currentData)) {\n                return [];\n            }\n\n            const date = new Date(selectedDate);\n            const startDate = new Date(date.setHours(0, 0, 0, 0));\n            const endDate = new Date(date.setHours(23, 59, 59, 999));\n\n            return currentData.filter(item => {\n                const itemDate = new Date(item.date);\n                return itemDate >= startDate && itemDate <= endDate;\n            });\n\n        } catch (error) {\n            console.error('커스텀 날짜 필터링 중 오류:', error);\n            return [];\n        }\n    }\n\n    async getNotionData(databaseId) {\n        try {\n            const baseUrl = window.location.hostname === 'localhost' \n                ? 'http://localhost:3000'  // 3001에서 3000으로 변경\n                : 'https://us-central1-hejdoohome-dashboard.cloudfunctions.net/api';\n\n            const response = await fetch(`${baseUrl}/notion/query`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ databaseId })\n            });\n\n            if (!response.ok) {\n                throw new Error(`서버 요청 실패: ${response.status}`);\n            }\n\n            const data = await response.json();\n            return data.results || [];\n        } catch (error) {\n            console.error('Notion 데이터 가져오기 실패:', error);\n            throw error;\n        }\n    }\n}","export class NotionService {\n    constructor(databaseId) {\n        if (!databaseId) {\n            throw new Error('Database ID가 필요합니다');\n        }\n        this.databaseId = databaseId;\n        \n        // 현재 환경이 로컬인지 더 정확하게 확인\n        const isLocal = window.location.hostname === 'localhost' || \n                       window.location.hostname === '127.0.0.1';\n                       \n        console.log('현재 호스트:', window.location.hostname);\n        console.log('로컬 환경?:', isLocal);\n        \n        this.baseUrl = isLocal\n            ? 'http://localhost:5001/hejdoohome-dashboard/us-central1/api'\n            : 'https://us-central1-hejdoohome-dashboard.cloudfunctions.net/api';\n            \n        console.log('사용할 API URL:', this.baseUrl);\n    }\n\n    async fetchDatabase() {\n        try {\n            console.log(`${this.databaseId} 데이터베이스 조회 시작`);\n            console.log('요청 URL:', `${this.baseUrl}/notion/query`);\n            \n            const response = await fetch(`${this.baseUrl}/notion/query`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                mode: 'cors',\n                body: JSON.stringify({ databaseId: this.databaseId })\n            });\n\n            if (!response.ok) {\n                throw new Error(`서버 요청 실패: ${response.status}`);\n            }\n\n            const data = await response.json();\n            return data.results || [];\n        } catch (error) {\n            console.error('Notion API 호출 중 오류:', error);\n            throw error;\n        }\n    }\n} ","import { FormatUtils } from '../utils/formatUtils.js';\nimport { DataService } from '../services/dataService.js';\n\nexport class TableManager {\n    constructor(dataService) {\n        this.dataService = dataService;\n        this.detailTableContainer = document.querySelector('.data-table-container');\n        if (!this.detailTableContainer) {\n            console.error('상세 테이블 컨테이너를 찾을 수 없습니다.');\n            return;\n        }\n        \n        this.initializeTable();\n        this.initializeSearchField();\n    }\n\n    initializeTable() {\n        // 기존 테이블이 있다면 제거\n        const existingTable = document.querySelector('.detail-data-table');\n        if (existingTable) {\n            existingTable.remove();\n        }\n\n        const table = document.createElement('table');\n        table.className = 'detail-data-table';\n        table.classList.add('table', 'table-striped', 'table-bordered');\n\n        // 테이블 헤더 생성\n        const thead = document.createElement('thead');\n        thead.innerHTML = `\n            <tr>\n                <th>날짜</th>\n                <th>판매처</th>\n                <th>주문번호</th>\n                <th>상품명</th>\n                <th>옵션</th>\n                <th class=\"text-right\">수량</th>\n                <th class=\"text-right\">매출</th>\n                <th>주문상태</th>\n                <th>구매자명</th>\n                <th>연락처</th>\n            </tr>\n        `;\n        table.appendChild(thead);\n\n        // 테이블 바디 생성\n        const tbody = document.createElement('tbody');\n        table.appendChild(tbody);\n\n        this.detailTableContainer.appendChild(table);\n        this.detailTable = table;\n    }\n\n    initializeSearchField() {\n        const searchContainer = document.createElement('div');\n        searchContainer.className = 'search-container mb-3';\n\n        const searchInput = document.createElement('input');\n        searchInput.type = 'text';\n        searchInput.id = 'tableSearch';\n        searchInput.className = 'form-control';\n        searchInput.placeholder = '검색어를 입력하세요...';\n\n        searchContainer.appendChild(searchInput);\n        this.detailTableContainer.insertBefore(searchContainer, this.detailTable);\n\n        // 검색 이벤트 리스너\n        searchInput.addEventListener('input', (e) => this.handleSearch(e.target.value));\n    }\n\n    updateTable(data) {\n        if (!this.detailTable) {\n            console.error('테이블이 초기화되지 않았습니다.');\n            return;\n        }\n\n        const tbody = this.detailTable.querySelector('tbody');\n        if (!tbody) {\n            console.error('테이블 tbody를 찾을 수 없습니다.');\n            return;\n        }\n\n        // 기존 데이터 삭제\n        tbody.innerHTML = '';\n\n        // 새 데이터 추가\n        data.forEach(row => {\n            const tr = document.createElement('tr');\n            tr.innerHTML = `\n                <td>${row.date || ''}</td>\n                <td>${row.seller || ''}</td>\n                <td>${row.orderNumber || ''}</td>\n                <td>${row.mappingStatus === 'unmapped' ? row.mappedProduct : row.originalProduct || ''}</td>\n                <td>${row.mappingStatus === 'unmapped' ? row.mappedOption : row.originalOption || ''}</td>\n                <td class=\"text-right\">${this.formatNumber(row.quantity)}</td>\n                <td class=\"text-right\">${this.formatCurrency(row.sales)}</td>\n                <td>${row.orderStatus || ''}</td>\n                <td>${row.customerName || ''}</td>\n                <td>${row.customerContact || ''}</td>\n            `;\n            tbody.appendChild(tr);\n        });\n    }\n\n    handleSearch(searchTerm) {\n        if (!this.detailTable) return;\n\n        const tbody = this.detailTable.querySelector('tbody');\n        if (!tbody) return;\n\n        const rows = tbody.getElementsByTagName('tr');\n        const searchLower = searchTerm.toLowerCase();\n\n        for (const row of rows) {\n            const text = row.textContent.toLowerCase();\n            row.style.display = text.includes(searchLower) ? '' : 'none';\n        }\n    }\n\n    formatNumber(num) {\n        if (num === undefined || num === null) return '';\n        return new Intl.NumberFormat('ko-KR').format(num);\n    }\n\n    formatCurrency(value) {\n        if (value === undefined || value === null) return '';\n        return new Intl.NumberFormat('ko-KR', { \n            style: 'currency', \n            currency: 'KRW' \n        }).format(value);\n    }\n\n    async updateTables(data) {\n        if (!Array.isArray(data)) {\n            console.error('데이터가 배열 형식이 아닙니다:', data);\n            return;\n        }\n        this.updateTable(data);\n    }\n} ","import { FormatUtils } from '../utils/formatUtils.js';\nimport { collection, getDocs, doc, serverTimestamp, deleteDoc } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js';\nimport { NotionService } from '../services/notionService.js';\nimport { formatNumber, calculateGrowth } from '../utils/numberUtils.js';\nimport { DataService } from '../services/dataService.js';\nimport { TableManager } from './tables.js';  // 경로 수정\n\nexport class Dashboard {\n    constructor(dataService) {\n        this.dataService = dataService;\n        this.currentPeriod = 'this-month';\n        this.startDate = null;\n        this.endDate = null;\n        this.tableManager = null;\n        this.initializeDateListeners();\n        \n        // 초기 로드 시 이번달 데이터로 대시보드 업데이트\n        const today = new Date();\n        this.startDate = new Date(today.getFullYear(), today.getMonth(), 1);\n        this.endDate = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n        \n        // dateFilterChanged 이벤트 발생\n        document.dispatchEvent(new CustomEvent('dateFilterChanged', {\n            detail: {\n                data: this.dataService.getCurrentData().filter(item => {\n                    const itemDate = new Date(item.date || item.orderDate);\n                    return itemDate >= this.startDate && itemDate <= this.endDate;\n                }),\n                period: 'this-month',\n                startDate: this.startDate,\n                endDate: this.endDate\n            }\n        }));\n\n        this.currentChartPeriod = 'day';\n        this.periodSalesChart = null;\n        this.dayOfWeekSalesChart = null;\n        this.initializeChartListeners();\n\n        // 차트 색상 정의\n        this.CHANNEL_COLORS = {\n            '스마트스토어': 'rgba(169, 186, 147, 0.7)',\n            '오늘의집': 'rgba(147, 165, 186, 0.7)',\n            '유튜브쇼핑': 'rgba(195, 177, 171, 0.7)'\n        };\n\n        // 차트 초기화 추가\n        this.initializeCharts();\n\n        // 기간 버튼 이벤트 리스너 추가\n        this.initializeChartPeriodButtons();\n\n        // 탭 전환 이벤트 리스너\n        document.querySelectorAll('.sidebar-menu-item').forEach(item => {\n            item.addEventListener('click', (e) => {\n                const tabId = e.currentTarget.dataset.tab;\n                this.switchTab(tabId);\n                \n                // 채널별 수수료 탭 초기화\n                if (tabId === 'channelCommissionTab') {\n                    this.initializeCommissionTab();\n                }\n            });\n        });\n    }\n\n    initializeDateListeners() {\n        document.addEventListener('dateFilterChanged', async (e) => {\n            const { data, period, startDate, endDate } = e.detail;\n            this.currentPeriod = period;\n            \n            // 날짜 객체로 변환하여 정확한 시간 설정\n            this.startDate = new Date(startDate);\n            this.startDate.setHours(0, 0, 0, 0);\n            this.endDate = new Date(endDate);\n            this.endDate.setHours(23, 59, 59, 999);\n            \n            // Datepicker 값 업데이트\n            const dateRangePicker = document.getElementById('dateRangePicker');\n            if (dateRangePicker) {\n                const formattedStart = this.formatDateForInput(this.startDate);\n                const formattedEnd = this.formatDateForInput(this.endDate);\n                dateRangePicker.value = `${formattedStart} ~ ${formattedEnd}`;\n            }\n            \n            // 대시보드 업데이트\n            await this.updateDashboard(data, period, this.startDate, this.endDate);\n\n            // 상세 데이터 테이블 업데이트\n            const activeTab = document.querySelector('.tab-content.active');\n            if (activeTab && activeTab.id === 'detailDataTab' && this.tableManager) {\n                await this.tableManager.updateTables(data);\n            }\n        });\n    }\n\n    async updateDashboard(data, period, startDate, endDate) {\n        try {\n            if (!Array.isArray(data)) {\n                console.error('대시보드 업데이트 실패: 잘못된 데이터 형식');\n                return;\n            }\n\n            // 1. 현재 기간 데이터 계산\n            const currentSalesData = this.calculateSalesData(data);\n            \n            // 2. 이전 기간 데이터 계산\n            const previousSalesData = await this.getPreviousPeriodData(period, startDate, endDate);\n\n            // 3. 증감율 계산\n            const growthRates = this.calculateGrowthRates(\n                {\n                    totalSales: currentSalesData.총매출,\n                    orderCount: currentSalesData.구매건수,\n                    uniqueCustomers: currentSalesData.구매자수\n                },\n                {\n                    totalSales: previousSalesData.총매출,\n                    orderCount: previousSalesData.구매건수,\n                    uniqueCustomers: previousSalesData.구매자수\n                }\n            );\n\n            // 4. UI 업데이트\n            this.updateDashboardUI(currentSalesData, growthRates, period);\n\n            // 5. 차트 업데이트 - Promise.all을 사용하여 동시에 실행\n            await Promise.all([\n                this.updateDayOfWeekSalesChart(data),\n                this.updatePeriodSalesChart(data)\n            ]);\n\n            // 6. 상세 매출 정보 업데이트\n            this.updateDetailedSalesInfo(data);\n\n            // 7. 판매처별 매출 업데이트\n            this.updateChannelSales(data);\n\n            // 8. 재구매 통계 업데이트 추가\n            this.updateRepurchaseStats(data);\n\n        } catch (error) {\n            console.error('매출 데이터 계산 중 오류:', error);\n        }\n    }\n\n    async getPreviousPeriodData(period, startDate, endDate) {\n        try {\n            if (!period) return [];\n\n            let previousStart, previousEnd;\n            const today = new Date();\n\n            if (period === 'all' || period === 'all-time') {\n                // 데이터에서 가장 오래된 날짜 찾기\n                const currentData = this.dataService.getCurrentData();\n                const oldestDate = new Date(Math.min(...currentData.map(d => new Date(d.date))));\n                \n                previousStart = oldestDate;\n                previousEnd = today;\n                previousEnd.setHours(23, 59, 59, 999);\n            } else if (period === 'custom') {\n                if (!startDate || !endDate) return [];\n                \n                const start = new Date(startDate);\n                const end = new Date(endDate);\n                const daysDiff = Math.ceil((end - start) / (1000 * 60 * 60 * 24));\n                \n                previousStart = new Date(start);\n                previousStart.setDate(start.getDate() - daysDiff);\n                previousEnd = new Date(end);\n                previousEnd.setDate(end.getDate() - daysDiff);\n            } else {\n                switch (period) {\n                    case 'today':\n                        previousStart = new Date(today);\n                        previousStart.setDate(today.getDate() - 1);\n                        previousStart.setHours(0, 0, 0, 0);\n                        previousEnd = new Date(previousStart);\n                        previousEnd.setHours(23, 59, 59, 999);\n                        break;\n\n                    case 'yesterday':\n                        previousStart = new Date(today);\n                        previousStart.setDate(today.getDate() - 2);\n                        previousStart.setHours(0, 0, 0, 0);\n                        previousEnd = new Date(previousStart);\n                        previousEnd.setHours(23, 59, 59, 999);\n                        break;\n\n                    case 'this-week':\n                        previousStart = new Date(today);\n                        previousStart.setDate(today.getDate() - (today.getDay() === 0 ? 6 : today.getDay() - 1) - 7);\n                        previousStart.setHours(0, 0, 0, 0);\n                        previousEnd = new Date(previousStart);\n                        previousEnd.setDate(previousStart.getDate() + 6);\n                        previousEnd.setHours(23, 59, 59, 999);\n                        break;\n\n                    case 'last-week':\n                        previousStart = new Date(today);\n                        previousStart.setDate(today.getDate() - (today.getDay() === 0 ? 6 : today.getDay() - 1) - 14);\n                        previousStart.setHours(0, 0, 0, 0);\n                        previousEnd = new Date(previousStart);\n                        previousEnd.setDate(previousStart.getDate() + 6);\n                        previousEnd.setHours(23, 59, 59, 999);\n                        break;\n\n                    case 'this-month':\n                        previousStart = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n                        previousStart.setHours(0, 0, 0, 0);\n                        previousEnd = new Date(today.getFullYear(), today.getMonth(), 0);\n                        previousEnd.setHours(23, 59, 59, 999);\n                        break;\n\n                    case 'last-month':\n                        previousStart = new Date(today.getFullYear(), today.getMonth() - 2, 1);\n                        previousStart.setHours(0, 0, 0, 0);\n                        previousEnd = new Date(today.getFullYear(), today.getMonth() - 1, 0);\n                        previousEnd.setHours(23, 59, 59, 999);\n                        break;\n\n                    case 'last-3-months':\n                        previousStart = new Date(today.getFullYear(), today.getMonth() - 6, 1);\n                        previousStart.setHours(0, 0, 0, 0);\n                        previousEnd = new Date(today.getFullYear(), today.getMonth() - 3, 0);\n                        previousEnd.setHours(23, 59, 59, 999);\n                        break;\n\n                    case 'last-6-months':\n                        previousStart = new Date(today.getFullYear(), today.getMonth() - 12, 1);\n                        previousStart.setHours(0, 0, 0, 0);\n                        previousEnd = new Date(today.getFullYear(), today.getMonth() - 6, 0);\n                        previousEnd.setHours(23, 59, 59, 999);\n                        break;\n                }\n            }\n\n            // 현재 데이터 가져오기\n            const currentData = this.dataService.getCurrentData();\n            \n            // 날짜 기준으로 필터링\n            const previousData = currentData.filter(item => {\n                const itemDate = new Date(item.date);\n                return itemDate >= previousStart && itemDate <= previousEnd;\n            });\n\n            // 이전 기간 매출 데이터 계산\n            const previousSalesData = this.calculateSalesData(previousData);\n\n            return previousSalesData;\n\n        } catch (error) {\n            console.error('이전 기간 데이터 조회 중 오류:', error);\n            return {\n                총매출: 0,\n                구매건수: 0,\n                구매자수: 0\n            };\n        }\n    }\n\n    calculateGrowthRates(current, previous) {\n        const calculateRate = (curr, prev) => {\n            if (prev === 0) return curr > 0 ? 100 : 0;\n            return ((curr - prev) / prev) * 100;\n        };\n\n        const rates = {\n            totalSales: calculateRate(current.totalSales, previous.totalSales),\n            orderCount: calculateRate(current.orderCount, previous.orderCount),\n            uniqueCustomers: calculateRate(current.uniqueCustomers, previous.uniqueCustomers)\n        };\n\n\n        return rates;\n    }\n\n    updateDashboardUI(salesData, growthRates, period) {\n        try {\n            // 매출액 업데이트\n            this.updateMetric('total-sales', salesData.총매출, growthRates.totalSales, this.formatCurrency);\n            \n            // 구매건수 업데이트\n            this.updateMetric('order-count', salesData.구매건수, growthRates.orderCount, this.formatNumber);\n            \n            // 구매자수 업데이트\n            this.updateMetric('customer-count', salesData.구매자수, growthRates.uniqueCustomers, this.formatNumber);\n\n            // 증감율 표시 여부 설정\n            const growthElements = document.querySelectorAll('.growth');\n            const amountElements = document.querySelectorAll('.amount');\n            const comparePeriodElements = document.querySelectorAll('.compare-period');\n            \n            growthElements.forEach(element => {\n                if (element) element.style.display = period === 'all' ? 'none' : 'block';\n            });\n            \n            amountElements.forEach(element => {\n                if (element) element.style.display = period === 'all' ? 'none' : 'block';\n            });\n\n            // 비교 기간 텍스트 업데이트\n            const comparePeriodText = this.getComparisonPeriodText(period, this.startDate, this.endDate);\n            comparePeriodElements.forEach(element => {\n                if (element) {\n                    element.style.display = period === 'all' ? 'none' : 'block';\n                    element.textContent = comparePeriodText;\n                }\n            });\n\n        } catch (error) {\n            console.error('대시보드 UI 업데이트 중 오류:', error);\n        }\n    }\n\n    updateMetric(elementId, value, growthRate, formatFunction) {\n        const valueElement = document.getElementById(elementId);\n        const growthId = elementId === 'total-sales' ? 'sales-growth' :\n                        elementId === 'order-count' ? 'order-growth' :\n                        elementId === 'customer-count' ? 'customer-growth' :\n                        `${elementId}-growth`;\n        \n        if (valueElement) {\n            let formattedValue = formatFunction(value);\n            if (elementId === 'order-count') formattedValue += '건';\n            if (elementId === 'customer-count') formattedValue += '명';\n            valueElement.textContent = formattedValue;\n        }\n        \n        const growthElement = document.getElementById(growthId);\n        const amountId = growthId.replace('growth', 'amount');\n        const amountElement = document.getElementById(amountId);\n        \n        if (growthElement && amountElement) {\n            // 증감값 계산\n            const previousValue = value / (1 + (growthRate / 100));\n            const difference = value - previousValue;\n            \n            // 증감율 포맷팅\n            const formattedGrowth = growthRate > 0 ? `+${growthRate.toFixed(1)}%` : \n                                   growthRate < 0 ? `${growthRate.toFixed(1)}%` : '0%';\n            \n            // 증감값 포맷팅\n            let formattedDiff = formatFunction(Math.abs(difference));\n            if (difference < 0) formattedDiff = '-' + formattedDiff;\n            if (elementId === 'order-count') formattedDiff += '건';\n            if (elementId === 'customer-count') formattedDiff += '명';\n            \n            // 증감 클래스 설정\n            const growthClass = growthRate > 0 ? 'positive' : \n                              growthRate < 0 ? 'negative' : '';\n            \n            growthElement.className = `growth ${growthClass}`;\n            growthElement.textContent = formattedGrowth;\n            amountElement.textContent = formattedDiff;\n        }\n    }\n\n    calculateDifference(currentValue, growthRate) {\n        return currentValue - (currentValue / (1 + (growthRate / 100)));\n    }\n\n    getComparisonPeriodText(period, startDate, endDate) {\n        const formatDate = (date) => `${date.getMonth() + 1}월 ${date.getDate()}일`;\n        const formatMonth = (date) => `${date.getFullYear()}년 ${date.getMonth() + 1}월`;\n        \n        const today = new Date();\n        \n        switch (period) {\n            case 'today':\n                const yesterday = new Date(today);\n                yesterday.setDate(today.getDate() - 1);\n                return `${formatDate(yesterday)} 대비`;\n                \n            case 'yesterday': {\n                const twoDaysAgo = new Date(today);\n                twoDaysAgo.setDate(today.getDate() - 2);\n                return `${formatDate(twoDaysAgo)} 대비`;\n            }\n            \n            case 'this-week': {\n                const lastWeekEnd = new Date(startDate);\n                lastWeekEnd.setDate(lastWeekEnd.getDate() - 1);\n                const lastWeekStart = new Date(lastWeekEnd);\n                lastWeekStart.setDate(lastWeekEnd.getDate() - 6);\n                return `${formatDate(lastWeekStart)} ~ ${formatDate(lastWeekEnd)} 대비`;\n            }\n            \n            case 'last-week': {\n                const twoWeeksAgoEnd = new Date(startDate);\n                twoWeeksAgoEnd.setDate(twoWeeksAgoEnd.getDate() - 1);\n                const twoWeeksAgoStart = new Date(twoWeeksAgoEnd);\n                twoWeeksAgoStart.setDate(twoWeeksAgoEnd.getDate() - 6);\n                return `${formatDate(twoWeeksAgoStart)} ~ ${formatDate(twoWeeksAgoEnd)} 대비`;\n            }\n            \n            case 'this-month': {\n                const lastMonth = new Date(startDate);\n                lastMonth.setMonth(lastMonth.getMonth() - 1);\n                return `${formatMonth(lastMonth)} 대비`;\n            }\n            \n            case 'last-month': {\n                const twoMonthsAgo = new Date(startDate);\n                twoMonthsAgo.setMonth(twoMonthsAgo.getMonth() - 1);\n                return `${formatMonth(twoMonthsAgo)} 대비`;\n            }\n            \n            case 'last-3-months': {\n                const threeMonthsAgo = new Date(startDate);\n                threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3);\n                const compareEnd = new Date(startDate);\n                compareEnd.setDate(compareEnd.getDate() - 1);\n                const compareStart = new Date(threeMonthsAgo);\n                return `${formatDate(compareStart)} ~ ${formatDate(compareEnd)} 대비`;\n            }\n            \n            case 'last-6-months': {\n                const sixMonthsAgo = new Date(startDate);\n                sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\n                const compareEnd = new Date(startDate);\n                compareEnd.setDate(compareEnd.getDate() - 1);\n                const compareStart = new Date(sixMonthsAgo);\n                return `${formatDate(compareStart)} ~ ${formatDate(compareEnd)} 대비`;\n            }\n            \n            case 'custom': {\n                const compareEnd = new Date(startDate);\n                compareEnd.setDate(compareEnd.getDate() - 1);\n                const compareStart = new Date(compareEnd);\n                const daysDiff = Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24));\n                compareStart.setDate(compareEnd.getDate() - daysDiff + 1);\n                return `${formatDate(compareStart)} ~ ${formatDate(compareEnd)} 대비`;\n            }\n            \n            default:\n                return '';\n        }\n    }\n\n    formatGrowthRate(rate) {\n        // 증감률 포맷팅 (소수점 1자리까지)\n        return `${rate > 0 ? '+' : ''}${rate.toFixed(1)}%`;\n    }\n\n    getGrowthClass(rate) {\n        if (typeof rate !== 'number') return 'growth-neutral';\n        return rate > 0 ? 'growth-positive' : \n               rate < 0 ? 'growth-negative' : \n               'growth-neutral';\n    }\n\n    calculateSalesData(data) {\n        \n        // 판매처 종류 확인\n        const sellers = new Set(data.map(item => item.seller));\n        \n        // 오늘의집 관련 판매처 찾기\n        const ohouseData = data.filter(item => \n            item.seller && ['오늘의집', '오늘의집2', 'ohouse', 'Ohouse'].includes(item.seller)\n        );\n        \n        // 매출 합계 계산 (취소/반품 제외)\n        const totalSales = data.reduce((sum, item) => {\n            const isOhouse = item.seller && ['오늘의집', '오늘의집2', 'ohouse', 'Ohouse'].includes(item.seller);\n            const isValidOrder = isOhouse || \n                !['취소', '미결제취소', '반품'].includes(item.orderStatus);\n            \n            if (isValidOrder) {\n                return sum + (parseFloat(item.sales) || 0);\n            }\n            return sum;\n        }, 0);\n        \n        // 구매 건수 계산 (취소/반품 제외한 모든 유효한 주문)\n        const validOrders = data.filter(item => {\n            const isOhouse = item.seller && ['오늘의집', '오늘의집2', 'ohouse', 'Ohouse'].includes(item.seller);\n            const isValidOrder = isOhouse || \n                !['취소', '미결제취소', '반품'].includes(item.orderStatus);\n            return isValidOrder;\n        });\n        \n        const purchaseCount = validOrders.length;  // 유효한 모든 주문 건수\n        \n        // 구매자 수 계산 (구매자명-연락처 기준으로 중복 제거)\n        const uniqueCustomers = new Set(\n            validOrders\n                .filter(item => item.customerName || item.customerContact)  // 구매자 정보가 있는 주문만 필터링\n                .map(item => {\n                    const name = item.customerName || '';\n                    const contact = item.customerContact || '';\n                    return `${name}-${contact}`;  // 구매자명-연락처 조합으로 유니크키 생성\n                })\n        ).size;\n\n        // 채널별 매출 (취소/반품 제외)\n        const salesByChannel = data.reduce((acc, item) => {\n            const isOhouse = item.seller && ['오늘의집', '오늘의집2', 'ohouse', 'Ohouse'].includes(item.seller);\n            const isValidOrder = isOhouse || \n                !['취소', '미결제취소', '반품'].includes(item.orderStatus);\n            \n            if (isValidOrder) {\n                const channel = item.seller || '기타';\n                acc[channel] = (acc[channel] || 0) + (parseFloat(item.sales) || 0);\n            }\n            return acc;\n        }, {});\n        \n\n        return {\n            총매출: totalSales,\n            구매건수: purchaseCount,\n            구매자수: uniqueCustomers,\n            채널별매출: salesByChannel\n        };\n    }\n\n    async updateProductSalesTable(data) {\n        const productSales = {};\n        const salesData = {\n            totalSales: 0,\n            orderCount: 0,\n            uniqueCustomers: new Set()\n        };\n        \n        data.forEach(row => {\n            if (row.seller === '스마트스토어' && CONFIG.SALES.ZERO_SALES_STATUSES.includes(row.orderStatus)) {\n                return;\n            }\n\n            // 원본 옵션 정확하게 가져오기\n            const originalOption = row.optionName || row.optionInfo || row.option || '';\n            const mappedProduct = this.dataService.mappingService.getMappedProductInfo(row.productName, originalOption) || { \n                product: row.productName, \n                option: originalOption, \n                price: row.originalSales / row.quantity \n            };\n            const sales = mappedProduct.price * row.quantity;\n\n            salesData.totalSales += sales;\n            salesData.orderCount++;\n\n            const customerId = row.buyerId || row.buyerEmail || row.buyerContact;\n            if (customerId) {\n                salesData.uniqueCustomers.add(customerId);\n            }\n        });\n\n        return {\n            totalSales: salesData.totalSales,\n            orderCount: salesData.orderCount,\n            uniqueCustomers: salesData.uniqueCustomers.size\n        };\n    }\n\n    formatCurrency(value) {\n        return new Intl.NumberFormat('ko-KR', { \n            style: 'currency', \n            currency: 'KRW' \n        }).format(value);\n    }\n\n    formatNumber(number) {\n        return new Intl.NumberFormat('ko-KR').format(number);\n    }\n\n    // Date 객체를 YYYY. MM. DD 형식의 문자열로 변환\n    formatDateForInput(date) {\n        if (!date) {\n            console.warn('Null date provided to formatDateForInput');\n            return '';\n        }\n        \n        try {\n            const d = new Date(date);\n            if (isNaN(d.getTime())) {\n                console.warn('Invalid date provided to formatDateForInput:', date);\n                return '';\n            }\n            \n            const year = d.getFullYear();\n            const month = String(d.getMonth() + 1).padStart(2, '0');\n            const day = String(d.getDate()).padStart(2, '0');\n            return `${year}. ${month}. ${day}`;\n        } catch (error) {\n            console.error('Error formatting date:', error);\n            return '';\n        }\n    }\n\n    initializeChartListeners() {\n        document.querySelectorAll('.period-btn').forEach(button => {\n            button.addEventListener('click', (e) => {\n                const period = e.target.dataset.period;\n                document.querySelectorAll('.period-btn').forEach(btn => {\n                    btn.classList.remove('active');\n                });\n                e.target.classList.add('active');\n                \n                switch(period) {\n                    case 'daily':\n                        this.currentChartPeriod = 'daily';\n                        break;\n                    case 'weekly':\n                        this.currentChartPeriod = 'weekly';\n                        break;\n                    case 'monthly':\n                        this.currentChartPeriod = 'monthly';\n                        break;\n                }\n                \n                // 현재 데이터로 차트 다시 그리기\n                this.updatePeriodSalesChart(this.dataService.getCurrentData());\n            });\n        });\n    }\n\n    updateCharts(data) {\n        this.updatePeriodSalesChart(data);\n        this.updateDailyChart(data);\n    }\n\n    async updatePeriodSalesChart(data) {\n        try {\n            // 1. 캔버스 확인\n            const canvas = document.getElementById('periodSalesChart');\n            if (!canvas || !data) {\n                console.error('기간별 매출 차트 업데이트 실패: 캔버스 또는 데이터 없음');\n                return;\n            }\n\n            // 2. 기존 차트 정리\n            if (this.periodSalesChart) {\n                this.periodSalesChart.destroy();\n            }\n\n            // 3. 데이터 처리\n            const salesData = {};\n            let filteredData;\n            \n            if (this.currentPeriod === 'all') {\n                // 전체 기간 선택 시 2023년 6월 26일부터 오늘까지\n                const startDate = new Date('2023-06-26');\n                startDate.setHours(0, 0, 0, 0);\n                const endDate = new Date();\n                endDate.setHours(23, 59, 59, 999);\n                \n                filteredData = data.filter(item => {\n                    const itemDate = new Date(item.date);\n                    return itemDate >= startDate && itemDate <= endDate;\n                });\n            } else {\n                filteredData = data.filter(item => {\n                    const itemDate = new Date(item.date);\n                    return itemDate >= this.startDate && itemDate <= this.endDate;\n                });\n            }\n\n            // 4. 날짜별 데이터 초기화 및 집계\n            filteredData.forEach(item => {\n                const date = new Date(item.date);\n                let dateKey;\n\n                switch (this.currentChartPeriod) {\n                    case 'weekly':\n                        const monday = new Date(date);\n                        monday.setDate(date.getDate() - (date.getDay() === 0 ? 6 : date.getDay() - 1));\n                        dateKey = this.formatDateKey(monday);\n                        break;\n                    case 'monthly':\n                        dateKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-01`;\n                        break;\n                    default: // daily\n                        dateKey = this.formatDateKey(date);\n                }\n\n                if (!salesData[dateKey]) {\n                    salesData[dateKey] = {\n                        date: dateKey,\n                        sales: {\n                            '스마트스토어': 0,\n                            '오늘의집': 0,\n                            '유튜브쇼핑': 0\n                        },\n                        orders: 0\n                    };\n                }\n\n                const channel = item.seller || item.channel;\n                if (channel && ['스마트스토어', '오늘의집', '유튜브쇼핑'].includes(channel)) {\n                    const quantity = parseInt(item.quantity) || 0;\n                    \n                    const originalProduct = item.originalProduct || item.productName || '';\n                    const originalOption = item.originalOption || '';\n                    \n                    const mappingInfo = this.dataService.mappingService.getMappedProductInfo(\n                        originalProduct,\n                        originalOption,\n                        channel\n                    );\n\n                    let price = 0;\n                    if (mappingInfo) {\n                        price = ['취소', '미결제취소', '반품'].includes(item.orderStatus) ? 0 : mappingInfo.price;\n                    }\n\n                    const sales = quantity * price;\n                    \n                    if (!['취소', '미결제취소', '반품'].includes(item.orderStatus)) {\n                        salesData[dateKey].sales[channel] += sales;\n                        salesData[dateKey].orders++;\n                    }\n                }\n            });\n\n            // 5. 차트 데이터 준비\n            const sortedDates = Object.keys(salesData).sort();\n            const datasets = [\n                {\n                    label: '스마트스토어',\n                    data: sortedDates.map(date => salesData[date].sales['스마트스토어']),\n                    backgroundColor: this.CHANNEL_COLORS['스마트스토어'],\n                    stack: 'stack1'\n                },\n                {\n                    label: '오늘의집',\n                    data: sortedDates.map(date => salesData[date].sales['오늘의집']),\n                    backgroundColor: this.CHANNEL_COLORS['오늘의집'],\n                    stack: 'stack1'\n                },\n                {\n                    label: '유튜브쇼핑',\n                    data: sortedDates.map(date => salesData[date].sales['유튜브쇼핑']),\n                    backgroundColor: this.CHANNEL_COLORS['유튜브쇼핑'],\n                    stack: 'stack1'\n                },\n                {\n                    label: '구매건수',\n                    type: 'line',\n                    data: sortedDates.map(date => salesData[date].orders),\n                    borderColor: '#666',\n                    borderWidth: 2,\n                    pointRadius: 4,\n                    fill: false,\n                    yAxisID: 'y1'\n                }\n            ];\n\n            // 6. 새로운 차트 생성\n            this.periodSalesChart = new Chart(canvas, {\n                type: 'bar',\n                data: {\n                    labels: this.formatPeriodLabels(sortedDates, this.currentChartPeriod),\n                    datasets: datasets\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            position: 'left',\n                        },\n                        y1: {\n                            type: 'linear',\n                            position: 'right',\n                            grid: {\n                                drawOnChartArea: false  // 오른쪽 y축의 그리드 라인 제거\n                            }\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            position: 'top',\n                            align: 'center',\n                            labels: {\n                                usePointStyle: true,\n                                padding: 20\n                            }\n                        },\n                        tooltip: {\n                            mode: 'index',  // 같은 x축 값의 모든 데이터를 하나의 툴팁으로 표시\n                            intersect: false,  // 정확한 교차점이 아니어도 가까운 데이터 표시\n                            callbacks: {\n                                title: function(tooltipItems) {\n                                    return tooltipItems[0].label;\n                                },\n                                afterBody: function(tooltipItems) {\n                                    const result = [];\n                                    \n                                    // 매출 데이터 표시\n                                    const salesItems = tooltipItems.filter(item => item.dataset.type !== 'line');\n                                    salesItems.forEach(item => {\n                                        result.push(`${item.dataset.label}: ₩${(item.raw/10000).toFixed(0)}만`);\n                                    });\n                                    \n                                    // 총 매출 합계 표시\n                                    const totalSales = salesItems.reduce((sum, item) => sum + item.raw, 0);\n                                    result.push(`총 매출: ₩${(totalSales/10000).toFixed(0)}만`);\n                                    \n                                    // 구매건수 표시\n                                    const orderItem = tooltipItems.find(item => item.dataset.type === 'line');\n                                    if (orderItem) {\n                                        result.push(`구매건수: ${orderItem.raw}건`);\n                                    }\n                                    \n                                    return result;\n                                },\n                                label: function(context) {\n                                    return null;  // label 콜백은 사용하지 않음\n                                }\n                            }\n                        }\n                    }\n                }\n            });\n\n        } catch (error) {\n            console.error('기간별 매출 차트 업데이트 중 오류:', error);\n        }\n    }\n\n    async updateDayOfWeekSalesChart(data) {\n        try {\n            const canvas = document.getElementById('dayOfWeekSalesChart');\n            if (!canvas || !data || !data.length) {\n                return;\n            }\n\n            // 요일별 데이터 초기화\n            const dayOfWeekData = {\n                sales: Array(7).fill(0),\n                orders: Array(7).fill(0),\n                channels: {\n                    '스마트스토어': Array(7).fill(0),\n                    '오늘의집': Array(7).fill(0),\n                    '유튜브쇼핑': Array(7).fill(0)\n                }\n            };\n\n            // 데이터 집계\n            data.forEach(item => {\n                const date = new Date(item.date);\n                let dayIndex = date.getDay();\n                dayIndex = dayIndex === 0 ? 6 : dayIndex - 1;  // 월요일이 0이 되도록 조정\n\n                const channel = item.seller;\n                const quantity = parseInt(item.quantity) || 0;\n                const originalProduct = item.originalProduct || item.productName || '';\n                const originalOption = item.originalOption || '';\n                \n                const mappingInfo = this.dataService.mappingService.getMappedProductInfo(\n                    originalProduct,\n                    originalOption,\n                    channel\n                );\n\n                let price = 0;\n                if (mappingInfo && !['취소', '미결제취소', '반품'].includes(item.orderStatus)) {\n                    price = mappingInfo.price;\n                }\n\n                const sales = quantity * price;\n\n                if (channel && ['스마트스토어', '오늘의집', '유튜브쇼핑'].includes(channel)) {\n                    dayOfWeekData.sales[dayIndex] += sales;\n                    dayOfWeekData.orders[dayIndex]++;\n                    dayOfWeekData.channels[channel][dayIndex] += sales;\n                }\n            });\n\n            // 데이터가 모두 0인지 확인\n            const hasData = dayOfWeekData.sales.some(value => value > 0);\n            if (!hasData) {\n                return;\n            }\n\n            const dayNames = ['월', '화', '수', '목', '금', '토', '일'];\n            const channels = ['스마트스토어', '오늘의집', '유튜브쇼핑'];\n            \n            // 채널별 데이터셋\n            const salesDatasets = channels.map(channel => ({\n                label: channel,\n                type: 'bar',\n                data: dayOfWeekData.channels[channel],\n                backgroundColor: this.CHANNEL_COLORS[channel],\n                borderColor: this.CHANNEL_COLORS[channel].replace('0.7', '1'),\n                borderWidth: 1,\n                stack: 'sales'\n            }));\n\n            // 구매건수 데이터셋\n            const orderDataset = {\n                label: '구매건수',\n                type: 'line',\n                data: dayOfWeekData.orders,\n                borderColor: '#666',\n                borderWidth: 2,\n                pointRadius: 4,\n                fill: false,\n                yAxisID: 'y1'\n            };\n\n            // 요일별 총 매출 계산\n            const totalSalesByDay = dayOfWeekData.sales;\n\n            const config = {\n                type: 'bar',\n                data: {\n                    labels: dayNames,\n                    datasets: [...salesDatasets, orderDataset]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            type: 'linear',\n                            position: 'left',\n                        },\n                        y1: {\n                            type: 'linear',\n                            position: 'right',\n                            grid: {\n                                drawOnChartArea: false\n                            }\n                        }\n                    },\n                    plugins: {\n                        tooltip: {\n                            mode: 'index',  // 같은 x축 값의 모든 데이터를 하나의 툴팁으로 표시\n                            intersect: false,  // 정확한 교차점이 아니어도 가까운 데이터 표시\n                            callbacks: {\n                                title: function(tooltipItems) {\n                                    return dayNames[tooltipItems[0].dataIndex] + '요일';\n                                },\n                                afterBody: function(tooltipItems) {\n                                    const result = [];\n                                    \n                                    // 매출 데이터 표시\n                                    const salesItems = tooltipItems.filter(item => item.dataset.type !== 'line');\n                                    salesItems.forEach(item => {\n                                        result.push(`${item.dataset.label}: ₩${(item.raw/10000).toFixed(0)}만`);\n                                    });\n                                    \n                                    // 총 매출 합계 표시\n                                    const totalSales = salesItems.reduce((sum, item) => sum + item.raw, 0);\n                                    result.push(`총 매출: ₩${(totalSales/10000).toFixed(0)}만`);\n                                    \n                                    // 구매건수 표시\n                                    const orderItem = tooltipItems.find(item => item.dataset.type === 'line');\n                                    if (orderItem) {\n                                        result.push(`구매건수: ${orderItem.raw}건`);\n                                    }\n                                    \n                                    return result;\n                                },\n                                label: function(context) {\n                                    return null;  // label 콜백은 사용하지 않음\n                                }\n                            }\n                        },\n                        legend: {\n                            position: 'top',\n                            align: 'center',\n                            labels: {\n                                usePointStyle: true,\n                                padding: 20\n                            }\n                        }\n                    }\n                }\n            };\n\n            if (this.dayOfWeekSalesChart) {\n                this.dayOfWeekSalesChart.destroy();\n            }\n            this.dayOfWeekSalesChart = new Chart(canvas, config);\n\n            // 요일별 평균 매출 계산 및 표시\n            const avgSales = totalSalesByDay.reduce((sum, sales) => sum + sales, 0) / 7;\n        } catch (error) {\n            console.error('요일별 매출 차트 업데이트 중 오류:', error);\n        }\n    }\n\n    formatDateForChart(date) {\n        return `${date.getMonth() + 1}/${date.getDate()}`;\n    }\n\n    formatCurrency(value) {\n        return new Intl.NumberFormat('ko-KR', {\n            style: 'currency',\n            currency: 'KRW',\n            maximumFractionDigits: 0\n        }).format(value);\n    }\n\n    groupDataByDay(data) {\n        const dailyTotals = new Array(7).fill(0);\n        \n        data.forEach(item => {\n            const date = this.getDateWithoutTime(item.date || item.orderDate);\n            let dayOfWeek = date.getDay();\n            dayOfWeek = dayOfWeek === 0 ? 6 : dayOfWeek - 1;\n            \n            const sales = parseFloat(item.매출 || 0);\n            dailyTotals[dayOfWeek] += sales;\n        });\n        \n        return dailyTotals;\n    }\n\n    // 판매처별 데이터 그룹화\n    groupDataByChannel(data) {\n        const channelTotals = new Map();\n        \n        data.forEach(item => {\n            const channel = item.channel || item.seller || '기타';\n            const quantity = parseInt(item.quantity) || 0;\n            \n            const originalProduct = item.originalProduct || item.productName || '';\n            const originalOption = item.originalOption || '';\n            \n            const mappingInfo = this.dataService.mappingService.getMappedProductInfo(\n                originalProduct,\n                originalOption,\n                channel\n            );\n\n            if (mappingInfo && !['취소', '미결제취소', '반품'].includes(item.orderStatus)) {\n                const sales = quantity * mappingInfo.price;\n                \n                if (!channelTotals.has(channel)) {\n                    channelTotals.set(channel, 0);\n                }\n                channelTotals.set(channel, channelTotals.get(channel) + sales);\n            }\n        });\n        \n        // 매출액 기준으로 내림차순 정렬\n        const sortedData = new Map([...channelTotals.entries()]\n            .sort((a, b) => b[1] - a[1]));\n        \n        return {\n            labels: Array.from(sortedData.keys()),\n            values: Array.from(sortedData.values())\n        };\n    }\n\n    groupDataByPeriod(data, period) {\n        const groupedData = {};\n        \n        const startDate = this.getDateWithoutTime(this.startDate);\n        const endDate = this.getDateWithoutTime(this.endDate);\n        \n        data.forEach(item => {\n            const date = this.getDateWithoutTime(item.date || item.orderDate);\n            // 날짜 비교 시 시간 제외\n            if (date < startDate || date > endDate) return;\n            \n            let key;\n            switch(period) {\n                case 'day':\n                    key = this.formatDateForChart(date);\n                    break;\n                case 'week': {\n                    const dayOfWeek = date.getDay();\n                    const mondayOffset = dayOfWeek === 0 ? -6 : 1 - dayOfWeek;\n                    const weekStart = new Date(date);\n                    weekStart.setDate(date.getDate() + mondayOffset);\n                    const weekEnd = new Date(weekStart);\n                    weekEnd.setDate(weekStart.getDate() + 6);\n                    key = `${this.formatDateForChart(weekStart)} ~ ${this.formatDateForChart(weekEnd)}`;\n                    break;\n                }\n                case 'month':\n                    key = `${date.getFullYear()}년 ${date.getMonth() + 1}월`;\n                    break;\n            }\n            \n            if (!groupedData[key]) {\n                groupedData[key] = 0;\n            }\n            \n            const sales = parseFloat(item.매출 || 0);\n            groupedData[key] += sales;\n        });\n        \n        // 날짜순으로 정렬\n        const sortedData = new Map([...groupedData.entries()].sort((a, b) => {\n            const dateA = this.getDateFromString(a[0].split('~')[0].trim());\n            const dateB = this.getDateFromString(b[0].split('~')[0].trim());\n            return dateA - dateB;\n        }));\n        \n        return {\n            labels: Array.from(sortedData.keys()),\n            values: Array.from(sortedData.values())\n        };\n    }\n\n    formatDateForChart(date) {\n        return `${date.getMonth() + 1}/${date.getDate()}`;\n    }\n\n    getChartTitle() {\n        switch(this.currentChartPeriod) {\n            case 'day':\n                return '일별 매출';\n            case 'week':\n                return '주별 매출';\n            case 'month':\n                return '월별 매출';\n            default:\n                return '기간별 매출';\n        }\n    }\n\n    formatNumber(value) {\n        return new Intl.NumberFormat('ko-KR').format(value);\n    }\n\n    // 날짜만 비교하기 위한 유틸리티 함수 추가\n    getDateWithoutTime(date) {\n        const d = new Date(date);\n        return new Date(d.getFullYear(), d.getMonth(), d.getDate());\n    }\n\n    // 날짜 문자열을 Date 객체로 변환하는 유틸리티 함수\n    getDateFromString(dateStr) {\n        const parts = dateStr.match(/(\\d+)월 (\\d+)일/);\n        if (parts) {\n            const currentYear = new Date().getFullYear();\n            return new Date(currentYear, parseInt(parts[1]) - 1, parseInt(parts[2]));\n        }\n        return new Date(dateStr);\n    }\n\n    updateTopChannels(data) {\n        const channelSales = {};\n        let totalSales = 0;\n        \n        data.forEach(item => {\n            const channel = item.판매처 || '기타';\n            const sales = parseFloat(item.매출 || 0);\n            \n            channelSales[channel] = (channelSales[channel] || 0) + sales;\n            totalSales += sales;\n        });\n        \n        const sortedChannels = Object.entries(channelSales)\n            .sort(([, a], [, b]) => b - a)\n            .map(([channel, sales]) => ({\n                channel,\n                sales,\n                ratio: (sales / totalSales * 100).toFixed(2)\n            }));\n        \n        const container = document.getElementById('top-channels');\n        if (container) {\n            container.innerHTML = sortedChannels.map(({ channel, sales, ratio }) => `\n                <div class=\"stat-item\">\n                    <div class=\"stat-title\">${channel}</div>\n                    <div class=\"stat-value\">${this.formatCurrency(sales)}</div>\n                    <div class=\"stat-sub\">${ratio}%</div>\n                </div>\n            `).join('');\n        }\n    }\n\n    updateTopProducts(data) {\n        const productSales = {};\n        \n        data.forEach(item => {\n            const quantity = parseInt(item.quantity) || 0;\n            \n            // 원본 데이터만 정확하게 추출\n            const originalProduct = item.originalProduct || item.productName || '';\n            const originalOption = item.originalOption || '';\n            \n            const mappingInfo = this.dataService.mappingService.getMappedProductInfo(\n                originalProduct,\n                originalOption,\n                item.channel || item.seller\n            );\n\n            // 매핑된 정보가 있을 때만 매핑된 값과 가격 사용\n            let displayProduct = originalProduct;\n            let price = 0;\n            if (mappingInfo) {\n                displayProduct = mappingInfo.productName;\n                // 취소/반품 주문은 매출 0으로 처리\n                price = ['취소', '미결제취소', '반품'].includes(item.orderStatus) ? 0 : mappingInfo.price;\n            }\n\n            const sales = quantity * price;\n            \n            // 취소/반품이 아닌 경우에만 매출과 수량에 포함\n            if (!['취소', '미결제취소', '반품'].includes(item.orderStatus)) {\n                if (!productSales[displayProduct]) {\n                    productSales[displayProduct] = {\n                        sales: 0,\n                        quantity: 0\n                    };\n                }\n                \n                productSales[displayProduct].sales += sales;\n                productSales[displayProduct].quantity += quantity;\n            }\n        });\n        \n        const sortedProducts = Object.values(productSales)\n            .sort((a, b) => b.sales - a.sales)\n            .slice(0, 5)\n            .map(({ product, sales, quantity }) => ({\n                product,\n                sales,\n                quantity\n            }));\n        \n        const container = document.getElementById('top-products');\n        if (container) {\n            container.innerHTML = sortedProducts.map(({ product, sales, quantity }) => `\n                <div class=\"stat-item\">\n                    <div class=\"stat-title\">${product}</div>\n                    <div class=\"stat-value\">${this.formatCurrency(sales)}</div>\n                    <div class=\"stat-sub\">${quantity}개</div>\n                </div>\n            `).join('');\n        }\n    }\n\n    getChannelColor(channel) {\n        const channelColors = {\n            '스마트스토어': 'rgba(81, 194, 106, 0.8)',\n            '오늘의집': 'rgba(83, 163, 194, 0.8)',\n            '유튜브쇼핑': 'rgba(184, 59, 48, 0.8)'\n        };\n        return channelColors[channel] || 'rgba(201, 203, 207, 0.8)';\n    }\n\n    // 비교 기간 포맷팅 함수\n    formatComparePeriod(startDate, endDate) {\n        const start = new Date(startDate);\n        const end = new Date(endDate);\n        return `${start.getMonth() + 1}월 ${start.getDate()}일 ~ ${end.getMonth() + 1}월 ${end.getDate()}일과 비교`;\n    }\n\n    formatPeriodLabels(dates, period) {\n        return dates.map(date => {\n            const d = new Date(date);\n            const kstDate = new Date(d.getTime() + (9 * 60 * 60 * 1000));\n            \n            switch (period) {\n                case 'monthly':\n                    return `${kstDate.getFullYear()}년 ${kstDate.getMonth() + 1}월`;\n                case 'weekly':\n                    return `${kstDate.getMonth() + 1}월 ${kstDate.getDate()}일`;\n                case 'daily':\n                default:\n                    return `${kstDate.getMonth() + 1}/${kstDate.getDate()}`;\n            }\n        });\n    }\n\n    // 차트 초기화 함수 추가\n    initializeCharts() {\n        const periodChartCanvas = document.getElementById('periodSalesChart');\n        const dayOfWeekCanvas = document.getElementById('dayOfWeekSalesChart');\n\n        if (periodChartCanvas && !this.periodSalesChart) {\n            this.periodSalesChart = new Chart(periodChartCanvas, {\n                type: 'bar',\n                data: {\n                    labels: [],\n                    datasets: []\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false\n                }\n            });\n        }\n\n        if (dayOfWeekCanvas && !this.dayOfWeekSalesChart) {\n            this.dayOfWeekSalesChart = new Chart(dayOfWeekCanvas, {\n                type: 'bar',\n                data: {\n                    labels: [],\n                    datasets: []\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false\n                }\n            });\n        }\n    }\n\n    formatDateKey(date) {\n        const year = date.getFullYear();\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const day = String(date.getDate()).padStart(2, '0');\n        return `${year}-${month}-${day}`;\n    }\n\n    initializeChartPeriodButtons() {\n        document.querySelectorAll('.period-btn').forEach(button => {\n            button.addEventListener('click', (e) => {\n                // 활성 버튼 스타일 변경\n                document.querySelectorAll('.period-btn').forEach(btn => {\n                    btn.classList.remove('active');\n                });\n                e.target.classList.add('active');\n                \n                // 차트 기간 업데이트\n                this.currentChartPeriod = e.target.dataset.period;\n                \n                // 현재 데이터로 차트 다시 그리기\n                const currentData = this.dataService.getCurrentData();\n                if (currentData) {\n                    this.updatePeriodSalesChart(currentData);\n                }\n            });\n        });\n    }\n\n    async handleDateSelection(period, customStartDate = null, customEndDate = null) {\n        try {\n            if (period === 'all') {\n                // 전체 기간 선택 시 2023년 6월 26일부터 오늘까지로 설정\n                this.startDate = new Date('2023-06-26');\n                this.startDate.setHours(0, 0, 0, 0);\n                this.endDate = new Date();\n                this.endDate.setHours(23, 59, 59, 999);\n                \n                // DatePicker 업데이트\n                const datePicker = document.getElementById('dateRangePicker')._flatpickr;\n                if (datePicker) {\n                    datePicker.setDate([this.startDate, this.endDate]);\n                }\n            } else {\n                // 기존 다른 기간 선택 로직\n                const dates = this.calculateDateRange(period, customStartDate, customEndDate);\n                this.startDate = dates.startDate;\n                this.endDate = dates.endDate;\n            }\n            \n            this.currentPeriod = period;\n            \n            // 데이터 업데이트\n            await this.updateDashboard();\n            \n        } catch (error) {\n            console.error('날짜 선택 처리 중 오류:', error);\n        }\n    }\n\n    async updateDetailedSalesInfo(data) {\n        try {\n            // 기존 더보기 버튼 제거\n            const existingShowMoreContainer = document.querySelector('.show-more-container');\n            if (existingShowMoreContainer) {\n                existingShowMoreContainer.remove();\n            }\n\n            const productSales = {};\n            let totalSales = 0;\n            let totalProfit = 0;\n            let totalOperatingProfit = 0;\n\n            // 채널별 수수료 데이터 가져오기\n            const commissionSnapshot = await getDocs(collection(window.firebase.db, 'channelCommissions'));\n            const commissionData = {};\n            commissionSnapshot.forEach(doc => {\n                const data = doc.data();\n                const key = `${data.productName}|${data.option || ''}`;\n                commissionData[key] = data.commissionRates;\n            });\n            \n            data.forEach(row => {\n                const mappingInfo = this.dataService.mappingService.getMappedProductInfo(\n                    row.originalProduct || row.productName,\n                    row.originalOption || '',\n                    row.channel || row.seller\n                );\n                \n                if (!mappingInfo || ['취소', '미결제취소', '반품'].includes(row.orderStatus)) {\n                    return;\n                }\n\n                const quantity = parseInt(row.quantity) || 0;\n                const sales = mappingInfo.price * quantity;\n                const cost = mappingInfo.cost * quantity;\n                const profit = sales - cost;\n\n                // 채널별 수수료 계산\n                const commissionKey = `${mappingInfo.productName}|${mappingInfo.option || ''}`;\n                const commissionRates = commissionData[commissionKey];\n                let commission = 0;\n\n                if (commissionRates) {\n                    const channel = row.channel || row.seller;\n                    let commissionRate = 0;\n\n                    if (channel === '스마트스토어') {\n                        commissionRate = commissionRates.smartstore;\n                    } else if (channel === '오늘의집') {\n                        commissionRate = commissionRates.ohouse;\n                    } else if (channel === '유튜브쇼핑') {\n                        commissionRate = commissionRates.ytshopping;\n                    }\n\n                    commission = (sales * commissionRate) / 100;\n                }\n\n                // 영업이익 = 순이익 - 수수료\n                const operatingProfit = profit - commission;\n\n                const key = `${mappingInfo.productName}|${mappingInfo.option || ''}`;\n                if (!productSales[key]) {\n                    productSales[key] = {\n                        product: mappingInfo.productName,\n                        option: mappingInfo.option || '',\n                        quantity: 0,\n                        sales: 0,\n                        profit: 0,\n                        commission: 0,\n                        operatingProfit: 0\n                    };\n                }\n\n                productSales[key].quantity += quantity;\n                productSales[key].sales += sales;\n                productSales[key].profit += profit;\n                productSales[key].commission += commission;\n                productSales[key].operatingProfit += operatingProfit;\n\n                totalSales += sales;\n                totalProfit += profit;\n                totalOperatingProfit += operatingProfit;\n            });\n\n            // 상품별 매출 테이블 업데이트\n            const tbody = document.getElementById('productSalesBody');\n            if (tbody) {\n                const tableElement = tbody.closest('table');\n                if (!tableElement.classList.contains('sales-table')) {\n                    tableElement.className = 'sales-table';\n                }\n                \n                const sortedProducts = Object.values(productSales)\n                    .sort((a, b) => b.sales - a.sales);\n\n                const initialDisplayCount = 15;\n                let isCurrentlyExpanded = false;\n\n                const rows = sortedProducts.map((item, index) => {\n                    const marginRate = ((item.profit / item.sales) * 100).toFixed(1);\n                    const operatingMarginRate = ((item.operatingProfit / item.sales) * 100).toFixed(1);\n                    \n                    return `\n                        <tr class=\"product-row ${index >= initialDisplayCount ? 'hidden' : ''}\">\n                            <td class=\"text-center\">${index + 1}</td>\n                            <td>${item.product}</td>\n                            <td>${item.option || '-'}</td>\n                            <td class=\"text-right\">${this.formatNumber(item.quantity)}개</td>\n                            <td class=\"text-right\">${this.formatCurrency(item.sales)}</td>\n                            <td class=\"text-right\">${this.formatCurrency(item.profit)} (${marginRate}%)</td>\n                            <td class=\"text-right\">${this.formatCurrency(item.operatingProfit)} (${operatingMarginRate}%)</td>\n                        </tr>\n                    `;\n                });\n\n                const totalRow = `\n                    <tr class=\"total-row\">\n                        <td colspan=\"4\"><strong>합계</strong></td>\n                        <td class=\"text-right\"><strong>${this.formatCurrency(totalSales)}</strong></td>\n                        <td class=\"text-right\"><strong>${this.formatCurrency(totalProfit)} (${((totalProfit / totalSales) * 100).toFixed(1)}%)</strong></td>\n                        <td class=\"text-right\"><strong>${this.formatCurrency(totalOperatingProfit)} (${((totalOperatingProfit / totalSales) * 100).toFixed(1)}%)</strong></td>\n                    </tr>\n                `;\n\n                tbody.innerHTML = rows.join('') + totalRow;\n\n                // 더보기 버튼 추가\n                if (sortedProducts.length > initialDisplayCount) {\n                    const showMoreContainer = document.createElement('div');\n                    showMoreContainer.className = 'show-more-container';\n                    showMoreContainer.innerHTML = `\n                        <button class=\"show-more-button\" data-expanded=\"false\">\n                            더보기 (${initialDisplayCount}/${sortedProducts.length})\n                        </button>\n                    `;\n                    \n                    // 기존 더보기 버튼이 있다면 제거\n                    const existingShowMore = tableElement.parentNode.querySelector('.show-more-container');\n                    if (existingShowMore) {\n                        existingShowMore.remove();\n                    }\n                    \n                    tableElement.parentNode.insertBefore(showMoreContainer, tableElement.nextSibling);\n\n                    // 더보기 버튼 이벤트 리스너 추가\n                    const showMoreButton = showMoreContainer.querySelector('.show-more-button');\n                    showMoreButton.addEventListener('click', () => {\n                        const isExpanded = showMoreButton.getAttribute('data-expanded') === 'true';\n                        const rows = tbody.querySelectorAll('.product-row');\n                        \n                        rows.forEach((row, index) => {\n                            if (index >= initialDisplayCount) {\n                                row.classList.toggle('hidden', isExpanded);\n                            }\n                        });\n                        \n                        showMoreButton.setAttribute('data-expanded', (!isExpanded).toString());\n                        showMoreButton.textContent = isExpanded ? \n                            `더보기 (${initialDisplayCount}/${sortedProducts.length})` : \n                            '접기';\n                    });\n                }\n            }\n        } catch (error) {\n            console.error('상품별 매출 정보 업데이트 중 오류:', error);\n        }\n    }\n\n    updateChannelSales(data) {\n        const channelData = this.groupDataByChannel(data);\n        const totalSales = channelData.values.reduce((sum, value) => sum + value, 0);\n        \n        const channelSalesBody = document.getElementById('channelSalesBody');\n        if (!channelSalesBody) return;\n\n        const rows = channelData.labels.map((channel, index) => {\n            const sales = channelData.values[index];\n            const percentage = ((sales / totalSales) * 100).toFixed(1);\n            return `\n                <tr>\n                    <td>${channel}</td>\n                    <td class=\"text-right\">${this.formatCurrency(sales)}</td>\n                    <td class=\"text-right\">${percentage}%</td>\n                </tr>\n            `;\n        });\n\n        // 합계 행 추가\n        const totalRow = `\n            <tr class=\"total-row\">\n                <td><strong>합계</strong></td>\n                <td class=\"text-right\"><strong>${this.formatCurrency(totalSales)}</strong></td>\n                <td class=\"text-right\"><strong>100%</strong></td>\n            </tr>\n        `;\n\n        channelSalesBody.innerHTML = rows.join('') + totalRow;\n    }\n\n    // 채널별 수수료 탭 초기화\n    initializeCommissionTab() {\n        const container = document.getElementById('channelCommissionTab');\n        container.innerHTML = `\n            <div class=\"commission-management\">\n                <div class=\"commission-controls\" style=\"text-align: left;\">\n                    <button id=\"editCommissions\" class=\"btn\">수정</button>\n                    <button id=\"saveCommissions\" class=\"btn\" style=\"display: none;\">저장</button>\n                    <button id=\"addCommissionRow\" class=\"btn\" style=\"display: none;\">새 상품 추가</button>\n                </div>\n                <div class=\"commission-table-container\">\n                    <table id=\"commissionTable\">\n                        <thead>\n                            <tr>\n                                <th>상품명</th>\n                                <th>옵션</th>\n                                <th>스마트스토어 (%)</th>\n                                <th>오늘의집 (%)</th>\n                                <th>유튜브쇼핑 (%)</th>\n                                <th class=\"action-column\">작업</th>\n                            </tr>\n                        </thead>\n                        <tbody id=\"commissionTableBody\"></tbody>\n                    </table>\n                </div>\n                <div class=\"commission-bottom-controls\">\n                    <button id=\"editCommissionsBottom\" class=\"btn\">수정</button>\n                    <button id=\"saveCommissionsBottom\" class=\"btn\" style=\"display: none;\">저장</button>\n                    <button id=\"addCommissionRowBottom\" class=\"btn\" style=\"display: none;\">새 상품 추가</button>\n                </div>\n            </div>\n        `;\n        \n        this.initializeCommissionListeners();\n        this.loadCommissionData();\n    }\n\n    // 수수료 데이터 행 생성\n    createCommissionRow(data = null, isEditing = false) {\n        const row = document.createElement('tr');\n        if (isEditing) {\n            row.innerHTML = `\n                <td><input type=\"text\" class=\"commission-input product-name\" value=\"${data?.productName || ''}\" required></td>\n                <td><input type=\"text\" class=\"commission-input option\" value=\"${data?.option || ''}\" ></td>\n                <td><input type=\"number\" class=\"commission-input smartstore\" value=\"${data?.commissionRates?.smartstore || '0'}\" min=\"0\" max=\"100\" step=\"0.1\"></td>\n                <td><input type=\"number\" class=\"commission-input ohouse\" value=\"${data?.commissionRates?.ohouse || '0'}\" min=\"0\" max=\"100\" step=\"0.1\"></td>\n                <td><input type=\"number\" class=\"commission-input ytshopping\" value=\"${data?.commissionRates?.ytshopping || '0'}\" min=\"0\" max=\"100\" step=\"0.1\"></td>\n                <td class=\"action-column\">\n                    <button class=\"delete-row-btn\">삭제</button>\n                </td>\n            `;\n        } else {\n            row.innerHTML = `\n                <td>${data?.productName || ''}</td>\n                <td>${data?.option || ''}</td>\n                <td>${data?.commissionRates?.smartstore || '0'}%</td>\n                <td>${data?.commissionRates?.ohouse || '0'}%</td>\n                <td>${data?.commissionRates?.ytshopping || '0'}%</td>\n                <td class=\"action-column\"></td>\n            `;\n        }\n        return row;\n    }\n\n    // 수수료 데이터 로드\n    async loadCommissionData() {\n        try {\n            const commissionSnapshot = await getDocs(collection(window.firebase.db, 'channelCommissions'));\n            const tbody = document.getElementById('commissionTableBody');\n            tbody.innerHTML = '';\n\n            commissionSnapshot.forEach(doc => {\n                const data = doc.data();\n                const row = this.createCommissionRow(data, false);\n                row.dataset.id = doc.id;\n                tbody.appendChild(row);\n            });\n        } catch (error) {\n            console.error('수수료 데이터 로드 중 오류:', error);\n        }\n    }\n\n    // 수수료 관리 이벤트 리스너 초기화\n    initializeCommissionListeners() {\n        const editBtn = document.getElementById('editCommissions');\n        const saveBtn = document.getElementById('saveCommissions');\n        const addBtn = document.getElementById('addCommissionRow');\n        const editBtnBottom = document.getElementById('editCommissionsBottom');\n        const saveBtnBottom = document.getElementById('saveCommissionsBottom');\n        const addBtnBottom = document.getElementById('addCommissionRowBottom');\n        const tbody = document.getElementById('commissionTableBody');\n\n        const toggleEditMode = async (isEditing) => {\n            if (!isEditing) {\n                // 저장 로직\n                try {\n                    const rows = tbody.getElementsByTagName('tr');\n                    const batch = window.firebase.firestore.batch();\n                    \n                    Array.from(rows).forEach(row => {\n                        const inputs = row.querySelectorAll('input');\n                        const data = {\n                            productName: inputs[0].value,\n                            option: inputs[1].value,\n                            commissionRates: {\n                                smartstore: parseFloat(inputs[2].value) || 0,\n                                ohouse: parseFloat(inputs[3].value) || 0,\n                                ytshopping: parseFloat(inputs[4].value) || 0\n                            },\n                            updatedAt: serverTimestamp()\n                        };\n\n                        const docId = row.dataset.id || doc(collection(window.firebase.db, 'channelCommissions')).id;\n                        const docRef = doc(window.firebase.db, 'channelCommissions', docId);\n                        batch.set(docRef, data);\n                    });\n\n                    await batch.commit();\n                    alert('수수료 정보가 저장되었습니다.');\n                    \n                    // 저장 후 데이터 다시 로드\n                    await this.loadCommissionData();\n                } catch (error) {\n                    console.error('수수료 정보 저장 중 오류:', error);\n                    alert('저장 중 오류가 발생했습니다.');\n                    return;\n                }\n            }\n\n            editBtn.style.display = isEditing ? 'none' : 'inline-block';\n            saveBtn.style.display = isEditing ? 'inline-block' : 'none';\n            addBtn.style.display = isEditing ? 'inline-block' : 'none';\n            editBtnBottom.style.display = isEditing ? 'none' : 'inline-block';\n            saveBtnBottom.style.display = isEditing ? 'inline-block' : 'none';\n            addBtnBottom.style.display = isEditing ? 'inline-block' : 'none';\n\n            if (isEditing) {\n                // 수정 모드로 전환\n                const rows = tbody.getElementsByTagName('tr');\n                Array.from(rows).forEach(row => {\n                    const data = {\n                        productName: row.cells[0].textContent,\n                        option: row.cells[1].textContent,\n                        commissionRates: {\n                            smartstore: parseFloat(row.cells[2].textContent),\n                            ohouse: parseFloat(row.cells[3].textContent),\n                            ytshopping: parseFloat(row.cells[4].textContent)\n                        }\n                    };\n                    const newRow = this.createCommissionRow(data, true);\n                    newRow.dataset.id = row.dataset.id;\n                    row.replaceWith(newRow);\n                });\n            }\n        };\n\n        editBtn.addEventListener('click', () => toggleEditMode(true));\n        editBtnBottom.addEventListener('click', () => toggleEditMode(true));\n        saveBtn.addEventListener('click', () => toggleEditMode(false));\n        saveBtnBottom.addEventListener('click', () => toggleEditMode(false));\n\n        const addNewRow = () => {\n            const newRow = this.createCommissionRow(null, true);\n            tbody.appendChild(newRow);\n        };\n\n        addBtn.addEventListener('click', addNewRow);\n        addBtnBottom.addEventListener('click', addNewRow);\n\n        // 삭제 버튼 이벤트 리스너\n        tbody.addEventListener('click', async (e) => {\n            if (e.target.classList.contains('delete-row-btn')) {\n                const row = e.target.closest('tr');\n                const productName = row.querySelector('.product-name')?.value || row.cells[0].textContent;\n                \n                if (confirm(`\"${productName}\" 상품의 수수료 정보를 삭제하시겠습니까?`)) {\n                    if (row.dataset.id) {\n                        try {\n                            await deleteDoc(doc(window.firebase.db, 'channelCommissions', row.dataset.id));\n                            alert('삭제되었습니다.');\n                        } catch (error) {\n                            console.error('삭제 중 오류:', error);\n                            alert('삭제 중 오류가 발생했습니다.');\n                            return;\n                        }\n                    }\n                    row.remove();\n                }\n            }\n        });\n    }\n\n    switchTab(tabId) {\n        // 모든 탭 컨텐츠와 메뉴 아이템의 active 클래스 제거\n        document.querySelectorAll('.tab-content, .sidebar-menu-item').forEach(el => {\n            el.classList.remove('active');\n        });\n        \n        // 선택된 탭과 메뉴 아이템에 active 클래스 추가\n        document.getElementById(tabId)?.classList.add('active');\n        document.querySelector(`.sidebar-menu-item[data-tab=\"${tabId}\"]`)?.classList.add('active');\n    }\n\n    // 월별 매출 현황 업데이트 함수\n    updateMonthlySalesTable(data) {\n        const tbody = document.getElementById('monthlySalesBody');\n        if (!tbody) return;\n\n        // 테이블에 클래스 적용\n        const table = tbody.closest('table');\n        table.className = 'monthly-sales-table';\n\n        // 월별 데이터 정리\n        const monthlyData = {};\n        data.forEach(item => {\n            if (!['취소', '미결제취소', '반품'].includes(item.orderStatus)) {\n                const date = new Date(item.orderDate);\n                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n                \n                if (!monthlyData[monthKey]) {\n                    monthlyData[monthKey] = {\n                        storeSales: 0,\n                        adRevenue: 0,\n                        groupSales: 0\n                    };\n                }\n\n                // 매출 유형에 따라 분류\n                const mappingInfo = this.dataService.mappingService.getMappedProductInfo(\n                    item.originalProduct || item.productName,\n                    item.originalOption || '',\n                    item.channel || item.seller\n                );\n\n                if (mappingInfo) {\n                    const sales = parseInt(item.quantity) * mappingInfo.price;\n                    if (item.isGroupPurchase) {\n                        monthlyData[monthKey].groupSales += sales;\n                    } else {\n                        monthlyData[monthKey].storeSales += sales;\n                    }\n                }\n            }\n        });\n\n        // 테이블 행 생성\n        const rows = Object.entries(monthlyData)\n            .sort(([a], [b]) => b.localeCompare(a))\n            .map(([month, data]) => {\n                const total = data.storeSales + data.adRevenue + data.groupSales;\n                const [year, monthNum] = month.split('-');\n                \n                return `\n                    <tr>\n                        <td>\n                            <span class=\"expand-btn\">+</span>\n                            ${monthNum}월\n                        </td>\n                        <td class=\"text-right\">${this.formatCurrency(data.storeSales)}</td>\n                        <td class=\"text-right\">${this.formatCurrency(data.adRevenue)}</td>\n                        <td class=\"text-right\">${this.formatCurrency(data.groupSales)}</td>\n                        <td class=\"text-right\">${this.formatCurrency(total)}</td>\n                    </tr>\n                    <tr class=\"detail-row\" style=\"display: none;\">\n                        <td colspan=\"5\">\n                            <div class=\"sales-detail\">\n                                <div class=\"store-sales-detail\">\n                                    <h4>스토어 매출 상세</h4>\n                                    ${this.generateStoreSalesDetail(data.storeSales)}\n                                </div>\n                                ${data.groupSales > 0 ? `\n                                    <div class=\"group-sales-detail\">\n                                        <h4>공동구매 매출 상세</h4>\n                                        ${this.generateGroupSalesDetail(data.groupSales)}\n                                    </div>\n                                ` : ''}\n                            </div>\n                        </td>\n                    </tr>\n                `;\n            });\n\n        tbody.innerHTML = rows.join('');\n        this.initializeExpandButtons();\n    }\n\n    // 확장/축소 버튼 초기화\n    initializeExpandButtons() {\n        document.querySelectorAll('.expand-btn').forEach(btn => {\n            btn.addEventListener('click', (e) => {\n                const detailRow = e.target.closest('tr').nextElementSibling;\n                const isExpanded = detailRow.style.display !== 'none';\n                \n                e.target.textContent = isExpanded ? '+' : '-';\n                detailRow.style.display = isExpanded ? 'none' : 'table-row';\n            });\n        });\n    }\n\n    // 스토어 매출 상세 HTML 생성\n    generateStoreSalesDetail(storeSales) {\n        return `\n            <div class=\"monthly-sales-detail\">\n                <h4>스토어 매출 상세</h4>\n                <div class=\"sales-detail-grid\">\n                    <div class=\"sales-detail-item\">\n                        <div class=\"store-name\">스마트스토어</div>\n                        <div class=\"store-amount\">${this.formatCurrency(storeSales * 0.7)}</div>\n                    </div>\n                    <div class=\"sales-detail-item\">\n                        <div class=\"store-name\">오늘의집</div>\n                        <div class=\"store-amount\">${this.formatCurrency(storeSales * 0.2)}</div>\n                    </div>\n                    <div class=\"sales-detail-item\">\n                        <div class=\"store-name\">유튜브쇼핑</div>\n                        <div class=\"store-amount\">${this.formatCurrency(storeSales * 0.1)}</div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    // 공동구매 매출 상세 HTML 생성\n    generateGroupSalesDetail(groupSales) {\n        return `\n            <div class=\"monthly-sales-detail\">\n                <h4>공동구매 매출 상세</h4>\n                <div class=\"sales-detail-grid\">\n                    <div class=\"sales-detail-item\">\n                        <div class=\"group-sales-title\">총 매출액</div>\n                        <div class=\"group-sales-amount\">${this.formatCurrency(groupSales)}</div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    initializeChartControls() {\n        const container = document.getElementById('periodSalesChart').parentElement;\n        \n        // 기간별 매출 분석 버튼 컨테이너 추가\n        const periodButtonsContainer = document.createElement('div');\n        periodButtonsContainer.className = 'period-btn-container';\n        periodButtonsContainer.innerHTML = `\n            <button class=\"period-btn active\" data-period=\"daily\">일별</button>\n            <button class=\"period-btn\" data-period=\"weekly\">주별</button>\n            <button class=\"period-btn\" data-period=\"monthly\">월별</button>\n        `;\n        \n        // 차트 위에 버튼 컨테이너 삽입\n        container.insertBefore(periodButtonsContainer, container.firstChild);\n        \n        // 버튼 이벤트 리스너 추가\n        document.querySelectorAll('.period-btn').forEach(button => {\n            button.addEventListener('click', (e) => {\n                // 활성 버튼 스타일 변경\n                document.querySelectorAll('.period-btn').forEach(btn => {\n                    btn.classList.remove('active');\n                });\n                e.target.classList.add('active');\n                \n                // 기간 설정\n                const period = e.target.dataset.period;\n                this.currentChartPeriod = period;\n                \n                // 현재 데이터로 차트 다시 그리기\n                this.updatePeriodSalesChart(this.dataService.getCurrentData());\n            });\n        });\n    }\n\n    // 발주 탭 초기화\n    initializeOrderTab() {\n        const orderContainer = document.querySelector('#orderTab .order-dashboard');\n        if (!orderContainer) return;\n\n        // 상단 컨트롤 섹션 추가\n        orderContainer.innerHTML = `\n            <div class=\"date-selector-container\">\n                <div class=\"button-container\">\n                    <button class=\"date-selector\" data-period=\"today\">오늘</button>\n                    <button class=\"date-selector\" data-period=\"this-week\">이번 주</button>\n                    <button class=\"date-selector\" data-period=\"this-month\">이번 달</button>\n                    <button class=\"date-selector\" data-period=\"custom\">직접설정</button>\n                </div>\n                <input type=\"text\" id=\"orderDateRangePicker\" class=\"date-range-picker\" style=\"display: none;\" placeholder=\"날짜 선택\" readonly>\n            </div>\n            <div class=\"order-summary\">\n                <div class=\"order-stats\">\n                    <div class=\"order-stat-box\">\n                        <h3>발주 현황</h3>\n                        <div class=\"order-stat-value\" id=\"order-status\">0건</div>\n                    </div>\n                    <div class=\"order-stat-box\">\n                        <h3>발주액</h3>\n                        <div class=\"order-stat-value\" id=\"order-amount\">0원</div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"order-cards-container\">\n                <div id=\"orderTableContainer\" class=\"order-table-container\"></div>\n            </div>\n        `;\n\n        // 날짜 선택기 이벤트 리스너\n        document.querySelectorAll('#orderTab .date-selector').forEach(button => {\n            button.addEventListener('click', (e) => {\n                const period = e.target.dataset.period;\n                const datePicker = document.getElementById('orderDateRangePicker');\n                \n                // 모든 버튼의 active 클래스 제거\n                document.querySelectorAll('#orderTab .date-selector').forEach(btn => {\n                    btn.classList.remove('active');\n                });\n                \n                // 클릭된 버튼에 active 클래스 추가\n                e.target.classList.add('active');\n\n                // 직접설정 버튼 클릭 시 date picker 표시\n                datePicker.style.display = period === 'custom' ? 'block' : 'none';\n\n                if (period !== 'custom') {\n                    this.handleOrderDateSelection(period);\n                }\n            });\n        });\n\n        // Flatpickr 초기화\n        this.initializeOrderDatePicker();\n    }\n\n    calculateRepurchaseStats(data) {\n        const customerPurchases = new Map();\n        \n        // 유효한 주문만 필터링\n        const validOrders = data.filter(item => \n            !['취소', '반품', '미결제취소'].includes(item.orderStatus)\n        );\n\n        // 주문번호별로 그룹화\n        const orderGroups = new Map();\n        validOrders.forEach(item => {\n            const orderNumber = item.orderNumber;\n            if (!orderGroups.has(orderNumber)) {\n                orderGroups.set(orderNumber, {\n                    customerName: item.customerName,\n                    customerContact: item.customerContact,\n                    date: item.date || item.orderDate,\n                    amount: 0\n                });\n            }\n            \n            const order = orderGroups.get(orderNumber);\n            const quantity = parseInt(item.quantity) || 0;\n            const mappingInfo = this.dataService.mappingService.getMappedProductInfo(\n                item.originalProduct || item.productName,\n                item.originalOption || '',\n                item.channel || item.seller\n            );\n\n            if (mappingInfo) {\n                order.amount += quantity * mappingInfo.price;\n            }\n        });\n\n        // 고객별 주문 정보 수집\n        orderGroups.forEach((order, orderNumber) => {\n            const { customerName, customerContact, date, amount } = order;\n            if (!customerName || !customerContact) return;\n            \n            const customerId = `${customerName}-${customerContact}`;\n            if (!customerPurchases.has(customerId)) {\n                customerPurchases.set(customerId, {\n                    name: customerName,\n                    contact: customerContact,\n                    orders: [],\n                    totalAmount: 0\n                });\n            }\n            \n            const customer = customerPurchases.get(customerId);\n            customer.orders.push({ date, amount });\n            customer.totalAmount += amount;\n        });\n\n        // 구매 횟수별로 고객 분류\n        const stats = {\n            firstTime: { count: 0, customers: [] },\n            repeat: { count: 0, customers: [] },\n            threeOrMore: { count: 0, customers: [] },\n            fiveOrMore: { count: 0, customers: [] }\n        };\n\n        customerPurchases.forEach((customer) => {\n            const purchaseCount = customer.orders.length;\n            customer.purchaseCount = purchaseCount;\n\n            if (purchaseCount === 1) {\n                stats.firstTime.count++;\n                stats.firstTime.customers.push(customer);\n            } else if (purchaseCount >= 5) {\n                stats.fiveOrMore.count++;\n                stats.fiveOrMore.customers.push(customer);\n            } else if (purchaseCount >= 3) {\n                stats.threeOrMore.count++;\n                stats.threeOrMore.customers.push(customer);\n            } else if (purchaseCount === 2) {\n                stats.repeat.count++;\n                stats.repeat.customers.push(customer);\n            }\n        });\n\n        return stats;\n    }\n\n    updateRepurchaseStats(data) {\n        try {\n            const repurchaseStats = this.calculateRepurchaseStats(data);\n            const tbody = document.getElementById('repurchaseStatsBody');\n            if (!tbody) return;\n\n            const totalCustomers = repurchaseStats.firstTime.count + repurchaseStats.repeat.count + \n                                 repurchaseStats.threeOrMore.count + repurchaseStats.fiveOrMore.count;\n\n            tbody.innerHTML = '';\n\n            // 카테고리별 데이터 생성\n            const categories = [\n                { \n                    label: '첫 구매', \n                    count: repurchaseStats.firstTime.count,\n                    customers: repurchaseStats.firstTime.customers\n                },\n                { \n                    label: '재구매', \n                    count: repurchaseStats.repeat.count,\n                    customers: repurchaseStats.repeat.customers\n                },\n                { \n                    label: '3회~4회', \n                    count: repurchaseStats.threeOrMore.count,\n                    customers: repurchaseStats.threeOrMore.customers\n                },\n                { \n                    label: '5회 이상', \n                    count: repurchaseStats.fiveOrMore.count,\n                    customers: repurchaseStats.fiveOrMore.customers\n                }\n            ];\n\n            // 각 카테고리별 행 생성\n            categories.forEach(category => {\n                const percentage = totalCustomers > 0 ? \n                    ((category.count / totalCustomers) * 100).toFixed(1) : '0.0';\n\n                // 메인 행 추가\n                const mainRow = document.createElement('tr');\n                mainRow.className = 'main-row';\n                mainRow.innerHTML = `\n                    <td>\n                        <button type=\"button\" class=\"toggle-details-btn\" aria-label=\"상세 정보 토글\">\n                            <i class=\"fas fa-plus\"></i>\n                        </button>\n                        <span>${category.label}</span>\n                    </td>\n                    <td class=\"text-right\">${category.count}명</td>\n                    <td class=\"text-right\">${percentage}%</td>\n                `;\n\n                // 상세 행 추가\n                const detailRow = document.createElement('tr');\n                detailRow.className = 'detail-row';\n                detailRow.style.display = 'none';\n                detailRow.innerHTML = `\n                    <td colspan=\"3\">\n                        <div class=\"customer-details-container\">\n                            <div class=\"sort-controls\">\n                                <div class=\"sort-buttons\">\n                                    <button class=\"sort-btn\" data-sort=\"amount\">\n                                        구매금액순\n                                        <i class=\"fas fa-sort\"></i>\n                                    </button>\n                                    <button class=\"sort-btn\" data-sort=\"date\">\n                                        최근구매순\n                                        <i class=\"fas fa-sort\"></i>\n                                    </button>\n                                </div>\n                            </div>\n                            <div class=\"customer-list\"></div>\n                        </div>\n                    </td>\n                `;\n\n                tbody.appendChild(mainRow);\n                tbody.appendChild(detailRow);\n\n                // 토글 버튼 클릭 이벤트 추가\n                const toggleBtn = mainRow.querySelector('.toggle-details-btn');\n                toggleBtn.addEventListener('click', (e) => {\n                    e.stopPropagation();\n                    const icon = toggleBtn.querySelector('i');\n                    const isExpanded = detailRow.style.display !== 'none';\n                    \n                    // 다른 모든 행 닫기\n                    tbody.querySelectorAll('.detail-row').forEach(row => {\n                        if (row !== detailRow) {\n                            row.style.display = 'none';\n                            const btn = row.previousElementSibling.querySelector('.toggle-details-btn i');\n                            if (btn) btn.className = 'fas fa-plus';\n                        }\n                    });\n\n                    // 현재 행 토글\n                    if (isExpanded) {\n                        detailRow.style.display = 'none';\n                        icon.className = 'fas fa-plus';\n                    } else {\n                        detailRow.style.display = 'table-row';\n                        icon.className = 'fas fa-minus';\n                        \n                        // 고객 상세 정보 표시\n                        const customerList = detailRow.querySelector('.customer-list');\n                        this.displayCustomerDetails(customerList, category.customers);\n                    }\n                });\n            });\n\n            // 전체 행 추가\n            const totalRow = document.createElement('tr');\n            totalRow.className = 'total-row';\n            const repurchaseCount = repurchaseStats.repeat.count + \n                                  repurchaseStats.threeOrMore.count + \n                                  repurchaseStats.fiveOrMore.count;\n            const repurchaseRate = totalCustomers > 0 ? \n                ((repurchaseCount / totalCustomers) * 100).toFixed(1) : '0.0';\n\n            totalRow.innerHTML = `\n                <td>전체</td>\n                <td class=\"text-right\">${totalCustomers}명</td>\n                <td class=\"text-right\">재구매율: ${repurchaseRate}%</td>\n            `;\n            tbody.appendChild(totalRow);\n        } catch (error) {\n            console.error('재구매 통계 업데이트 중 오류:', error);\n        }\n    }\n\n    // 고객 상세 정보 표시 함수\n    displayCustomerDetails(container, customers) {\n        if (!container || !customers) return;\n\n        const formatDate = (dateStr) => {\n            const date = new Date(dateStr);\n            return `${String(date.getFullYear()).slice(-2)}.${String(date.getMonth() + 1).padStart(2, '0')}.${String(date.getDate()).padStart(2, '0')}`;\n        };\n\n        container.innerHTML = customers.map(customer => {\n            // 구매일자 정렬 (오래된 순)\n            const sortedOrders = [...customer.orders].sort((a, b) => \n                new Date(a.date) - new Date(b.date)\n            );\n\n            return `\n                <div class=\"customer-detail-item\">\n                    <div class=\"customer-info\">\n                        <div class=\"customer-header\">\n                            <span class=\"customer-name\">${customer.name}</span>\n                            <span class=\"customer-contact\">(${customer.contact || ''})</span>\n                        </div>\n                        <div class=\"customer-total\">₩${this.formatNumber(customer.totalAmount)}</div>\n                    </div>\n                    <div class=\"purchase-info\">\n                        <span class=\"purchase-count\">${customer.orders.length}회 구매</span>\n                        <span class=\"purchase-dates\">${sortedOrders.map(order => formatDate(order.date)).join(', ')}</span>\n                    </div>\n                </div>\n            `;\n        }).join('');\n\n        // 정렬 버튼 이벤트 리스너\n        const sortButtons = container.parentElement.querySelectorAll('.sort-btn');\n        sortButtons.forEach(button => {\n            button.addEventListener('click', (e) => {\n                e.stopPropagation();\n                const sortType = button.dataset.sort;\n                const currentSort = button.dataset.currentSort || 'none';\n                \n                // 정렬 방향 결정\n                let newSort = 'asc';\n                if (currentSort === 'asc') newSort = 'desc';\n                if (currentSort === 'desc') newSort = 'asc';\n                \n                // 다른 버튼의 정렬 상태 초기화\n                sortButtons.forEach(btn => {\n                    btn.dataset.currentSort = '';\n                    btn.querySelector('i').className = 'fas fa-sort';\n                });\n                \n                // 현재 버튼 상태 업데이트\n                button.dataset.currentSort = newSort;\n                button.querySelector('i').className = `fas fa-sort-${newSort === 'asc' ? 'up' : 'down'}`;\n                \n                // 고객 목록 정렬\n                const sortedCustomers = [...customers].sort((a, b) => {\n                    if (sortType === 'amount') {\n                        return newSort === 'asc' ? \n                            a.totalAmount - b.totalAmount : \n                            b.totalAmount - a.totalAmount;\n                    } else if (sortType === 'date') {\n                        const aDate = new Date(a.orders[0].date);\n                        const bDate = new Date(b.orders[0].date);\n                        return newSort === 'asc' ? \n                            aDate - bDate : \n                            bDate - aDate;\n                    }\n                    return 0;\n                });\n                \n                this.displayCustomerDetails(container, sortedCustomers);\n            });\n        });\n    }\n\n    async updateSalesData(data) {\n        console.log('상품별 매출 계산 시작');\n        const salesByProduct = {};\n        \n        data.forEach(item => {\n            if (item.seller === '오늘의집') {\n                console.log('오늘의집 상품 처리:', {\n                    productName: item.productName,\n                    option: item.optionName || item.optionInfo || item.option || '',\n                    quantity: item.quantity,\n                    sales: item.sales,\n                    orderStatus: item.orderStatus\n                });\n            }\n            \n            const quantity = parseInt(item.quantity) || 0;\n            const originalOption = item.optionName || item.optionInfo || item.option || '';\n            const mappedProduct = this.dataService.mappingService.getMappedProductInfo(item.productName, originalOption) || {\n                product: item.productName,\n                option: originalOption,\n                price: item.originalSales / quantity,\n                cost: 0\n            };\n\n            const mappedKey = `${mappedProduct.product}-${mappedProduct.option}`;\n            \n            if (!salesByProduct[mappedKey]) {\n                salesByProduct[mappedKey] = {\n                    quantity: 0,\n                    sales: 0,\n                    cost: mappedProduct.cost || 0\n                };\n            }\n            \n            let sales = mappedProduct.price * quantity;\n            if (item.seller === '스마트스토어' && CONFIG.SALES.ZERO_SALES_STATUSES.includes(item.orderStatus)) {\n                sales = 0;\n            }\n            \n            salesByProduct[mappedKey].quantity += quantity;\n            salesByProduct[mappedKey].sales += sales;\n        });\n\n        console.log('최종 상품별 매출:', salesByProduct);\n\n        const tbody = document.querySelector('#sales-by-product tbody');\n        if (!tbody) return;\n\n        Object.entries(salesByProduct)\n            .sort(([, a], [, b]) => b.sales - a.sales)\n            .forEach(([productName, data]) => {\n                const row = document.createElement('tr');\n                row.innerHTML = `\n                    <td>${productName}</td>\n                    <td class=\"text-right\">${this.formatNumber(data.quantity)}</td>\n                    <td class=\"text-right\">${this.formatCurrency(data.sales)}</td>\n                    <td class=\"text-right\">${this.formatCurrency(data.cost * data.quantity)}</td>\n                    <td class=\"text-right\">${this.formatCurrency(data.sales - (data.cost * data.quantity))}</td>\n                `;\n                tbody.appendChild(row);\n            });\n    }\n} \n\n","import { NotionService } from '../services/notionService.js';\n\nexport class OrderManager {\n    constructor() {\n        this.notionService = new NotionService('1541d84cc1ac80bc8696fe96b2cc86b8');\n        this.orderTableContainer = document.getElementById('orderTableContainer');\n        this.data = [];\n        this.initialize();\n        this.setupDateFilter();\n    }\n\n    async initialize() {\n        try {\n            this.orderTableContainer.innerHTML = '<div class=\"loading\">데이터를 불러오는 중...</div>';\n            \n            const rawData = await this.notionService.fetchDatabase();\n            const processedData = this.processNotionData(rawData);\n            this.data = processedData;\n            \n            this.renderTable(this.data);\n        } catch (error) {\n            console.error('발주 데이터 초기화 중 오류:', error);\n            this.orderTableContainer.innerHTML = `\n                <div class=\"error-message\">\n                    데이터를 불러오는데 실패했습니다.<br>\n                    <small>${error.message}</small>\n                </div>\n            `;\n        }\n    }\n\n    processNotionData(data) {\n        try {\n            const orderGroups = data.reduce((groups, page) => {\n                const props = page.properties;\n                \n                // 핵심 데이터만 로깅\n                console.log(\"\\n=== 주문 데이터 ===\");\n                console.log({\n                    발주코드: props['발주코드']?.select?.name,\n                    발주명: props['발주명']?.rich_text?.[0]?.plain_text,\n                    발주차수: props['발주차수']?.select?.name,\n                    발주액: {\n                        수량: props['발주수량']?.number,\n                        단가: props['단가']?.number\n                    },\n                    송금: {\n                        선금: props['선금송금액']?.number,\n                        선금환율: props['선금환율']?.number,\n                        잔금: props['잔금송금액']?.number,\n                        잔금환율: props['잔금환율']?.number\n                    },\n                    입항후비용: props['입항후비용']?.number,\n                    상태: props['상태']?.status?.name\n                });\n\n                const orderCode = props['발주코드']?.select?.name || '';\n                if (!orderCode) {\n                    console.warn('발주코드 누락된 데이터 발견');\n                    return groups;\n                }\n\n                const 발주명 = props['발주명']?.rich_text?.[0]?.plain_text || '제목 없음';\n                const 발주차수 = props['발주차수']?.select?.name || '미지정';\n                \n                if (!groups[orderCode]) {\n                    groups[orderCode] = {\n                        발주코드: orderCode,\n                        발주명: 발주명,\n                        상태: props['상태']?.status?.name || '',\n                        총발주수량: 0,\n                        총발주액: 0,\n                        최초발주일: null,\n                        최종입고일: null,\n                        차수별발주: {}\n                    };\n                }\n\n                if (!groups[orderCode].차수별발주[발주차수]) {\n                    groups[orderCode].차수별발주[발주차수] = {\n                        발주차수,\n                        발주명: 발주명,\n                        발주수량: 0,\n                        발주액: 0,\n                        items: []\n                    };\n                }\n\n                const orderItem = {\n                    id: page.id,\n                    발주명: 발주명,\n                    발주일: props['발주일']?.date?.start || '',\n                    발주수량: props['발주수량']?.number || 0,\n                    단가: props['단가']?.number || 0,\n                    발주액: (props['발주수량']?.number || 0) * (props['단가']?.number || 0),\n                    선금환율: props['선금환율']?.number || 0,\n                    잔금환율: props['잔금환율']?.number || 0,\n                    선금송금액: props['선금송금액']?.number || 0,\n                    잔금송금액: props['잔금송금액']?.number || 0,\n                    입항후비용: props['입항후비용']?.number || 0,\n                    원화발주액: props['원화발주액']?.number || 0,\n                    상태: props['상태']?.status?.name || '',\n                    입항예정일: props['입항예정일']?.date?.start || '',\n                    최종입고일: props['최종입고일']?.date?.start || ''\n                };\n\n                // 원화환산 계산\n                orderItem.원화환산 = (orderItem.선금송금액 * orderItem.선금환율) + \n                                   (orderItem.잔금송금액 * orderItem.잔금환율) +\n                                   (orderItem.원화발주액 || 0);\n\n                // 잔금 계산\n                orderItem.잔금 = orderItem.잔금송금액 ? 0 : (orderItem.발주액 - orderItem.선금송금액);\n\n                // 제품원가 계산\n                orderItem.제품원가 = (orderItem.원화환산 + (orderItem.입항후비용 || 0)) / orderItem.발주수량;\n\n                // 차수별 합계 업데이트\n                groups[orderCode].차수별발주[발주차수].발주수량 += orderItem.발주수량;\n                groups[orderCode].차수별발주[발주차수].발주액 += orderItem.발주액;\n                groups[orderCode].차수별발주[발주차수].items.push(orderItem);\n\n                // 전체 합계 업데이트\n                groups[orderCode].총발주수량 += orderItem.발주수량;\n                groups[orderCode].총발주액 += orderItem.발주액;\n                \n                // 총잔액은 잔금송금액이 있는 경우 0으로 처리\n                groups[orderCode].총잔액 = (groups[orderCode].총잔액 || 0) + orderItem.잔금;\n\n                // 최초발주일 업데이트\n                if (!groups[orderCode].최초발주일 || orderItem.발주일 < groups[orderCode].최초발주일) {\n                    groups[orderCode].최초발주일 = orderItem.발주일;\n                }\n\n                // 최종입고일 업데이트\n                if (orderItem.최종입고일 && (!groups[orderCode].최종입고일 || \n                    orderItem.최종입고일 > groups[orderCode].최종입고일)) {\n                    groups[orderCode].최종입고일 = orderItem.최종입고일;\n                }\n\n                // 원화환산 계산 결과 로깅\n                const 선금원화환산 = orderItem.선금송금액 * orderItem.선금환율;\n                const 잔금원화환산 = orderItem.잔금송금액 * orderItem.잔금환율;\n                \n                console.log(\"원화환산:\", {\n                    선금: `$${orderItem.선금송금액} × ₩${orderItem.선금환율} = ₩${선금원화환산}`,\n                    잔금: `$${orderItem.잔금송금액} × ₩${orderItem.잔금환율} = ₩${잔금원화환산}`,\n                    총액: `₩${선금원화환산 + 잔금원화환산}`\n                });\n\n                return groups;\n            }, {});\n\n            return Object.values(orderGroups);\n        } catch (error) {\n            console.error('데이터 처리 중 오류:', error);\n            throw error;\n        }\n    }\n\n    renderTable(data) {\n        const stats = this.calculateOrderStats(data);\n        const container = document.createElement('div');\n        container.innerHTML = `\n            <div class=\"stats-grid\">\n                <div class=\"stat-box\">\n                    <h3>발주 현황</h3>\n                    <div class=\"stat-value\">${Object.values(stats.statusCount).reduce((a, b) => a + b, 0)}건</div>\n                    <div class=\"stat-details\">\n                        ${Object.entries(stats.statusCount).map(([status, count]) => `\n                            <div class=\"stat-detail\">\n                                <span class=\"detail-label\">${status}:</span>\n                                <span class=\"detail-value\">${count}건</span>\n                            </div>\n                        `).join('')}\n                    </div>\n                </div>\n                <div class=\"stat-box\">\n                    <h3>발주액</h3>\n                    <div class=\"stat-details\">\n                        <div class=\"stat-detail usd-amount\">\n                            <span class=\"detail-label\">USD 총 발주액:</span>\n                            <span class=\"detail-value\">$${Math.round(stats.totalAmountUSD).toLocaleString()}</span>\n                        </div>\n                        <div class=\"stat-detail krw-amount\">\n                            <span class=\"detail-label\">원화 총 발주액:</span>\n                            <span class=\"detail-value\">₩${Math.round(stats.totalWonAmount).toLocaleString()}</span>\n                        </div>\n                        <div class=\"stat-detail section-divider usd-amount\">\n                            <span class=\"detail-label\">송금 총액 (USD):</span>\n                            <span class=\"detail-value\">$${Math.round(stats.totalPaidUSD).toLocaleString()}</span>\n                        </div>\n                        <div class=\"stat-detail remaining\">\n                            <span class=\"detail-label\">잔금 총액 (USD):</span>\n                            <span class=\"detail-value\">$${Math.round(stats.totalRemainingUSD).toLocaleString()}</span>\n                        </div>\n                        <div class=\"stat-detail section-divider usd-amount\">\n                            <span class=\"detail-label\">USD 송금 원화환산:</span>\n                            <span class=\"detail-value\">₩${Math.round(stats.totalUSDtoKRW).toLocaleString()}</span>\n                        </div>\n                        <div class=\"stat-detail krw-amount\">\n                            <span class=\"detail-label\">원화 발주 송금액:</span>\n                            <span class=\"detail-value\">₩${Math.round(stats.totalWonAmount).toLocaleString()}</span>\n                        </div>\n                        <div class=\"stat-detail section-divider\">\n                            <span class=\"detail-label\">제품발주비용:</span>\n                            <span class=\"detail-value\">₩${Math.round(stats.totalProductCost).toLocaleString()}</span>\n                        </div>\n                        <div class=\"stat-detail post-arrival\">\n                            <span class=\"detail-label\">입항후비용:</span>\n                            <span class=\"detail-value\">₩${Math.round(stats.totalPostArrivalCost).toLocaleString()}</span>\n                        </div>\n                        <div class=\"stat-detail total\">\n                            <span class=\"detail-label\">발주관련 총액:</span>\n                            <span class=\"detail-value\">₩${Math.round(stats.totalOrderAmount).toLocaleString()}</span>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"order-cards-container\">\n                ${this.generateOrderCardsHTML(data)}\n            </div>\n        `;\n\n        this.orderTableContainer.innerHTML = '';\n        this.orderTableContainer.appendChild(container);\n\n        // 이벤트 리스너 설정\n        this.setupCardEventListeners(container.querySelector('.order-cards-container'));\n    }\n\n    calculateOrderStats(data) {\n        const stats = {\n            statusCount: {},\n            totalAmountUSD: 0,\n            totalPaidUSD: 0,\n            totalRemainingUSD: 0,\n            totalUSDtoKRW: 0,\n            totalWonAmount: 0,\n            totalProductCost: 0,\n            totalPostArrivalCost: 0,\n            totalOrderAmount: 0\n        };\n\n        data.forEach(order => {\n            // 상태별 카운트\n            const status = order.상태 || '상태없음';\n            stats.statusCount[status] = (stats.statusCount[status] || 0) + 1;\n\n            // USD 관련 금액\n            stats.totalAmountUSD += Number(order.총발주액) || 0;\n            stats.totalPaidUSD += Number(order.송금총액) || 0;\n            stats.totalRemainingUSD += Number(order.총잔액) || 0;\n\n            // 원화 관련 금액\n            Object.values(order.차수별발주 || {}).forEach(차수 => {\n                차수.items.forEach(item => {\n                    // USD 송금 원화환산\n                    const 선금원화 = (Number(item.선금송금액) || 0) * (Number(item.선금환율) || 0);\n                    const 잔금원화 = (Number(item.잔금송금액) || 0) * (Number(item.잔금환율) || 0);\n                    stats.totalUSDtoKRW += 선금원화 + 잔금원화;\n\n                    // 원화 발주액\n                    stats.totalWonAmount += Number(item.원화발주액) || 0;\n                    \n\n                    // 입항후비용\n                    stats.totalPostArrivalCost += Number(item.입항후비용) || 0;\n                });\n            });\n\n            // 제품발주비용 = USD 송금 원화환산 + 원화 발주액\n            stats.totalProductCost = stats.totalUSDtoKRW + stats.totalWonAmount;\n\n            // 발주관련 총액 = 제품발주비용 + 입항후비용\n            stats.totalOrderAmount = stats.totalProductCost + stats.totalPostArrivalCost;\n        });\n\n        return stats;\n    }\n\n    filterOrdersByDate(startDate, endDate) {\n        if (!this.data || !Array.isArray(this.data)) return;\n\n        const filteredOrders = startDate && endDate\n            ? this.data.filter(order => {\n                const orderDate = new Date(order.최초발주일);\n                return orderDate >= startDate && orderDate <= endDate;\n            })\n            : this.data;\n\n        this.renderTable(filteredOrders);\n    }\n\n    generateOrderCardsHTML(data) {\n        if (!data || !Array.isArray(data)) return '';\n\n        let html = '';\n        \n        // 주문 카드 생성\n        data.forEach((order, index) => {\n            html += `\n                <div class=\"order-card\" data-order=\"${order.발주코드}\">\n                    <div class=\"order-card-header\">\n                        <div class=\"order-info\">\n                            <div class=\"order-title\">\n                                <span class=\"status-badge ${order.상태?.toLowerCase() || 'default'}\">${order.상태 || '상태없음'}</span>\n                                <h3>${order.발주코드 || '-'}</h3>\n                            </div>\n                            <div class=\"order-meta\">\n                                <span class=\"order-dates\">\n                                    <i class=\"fas fa-calendar\"></i>\n                                    ${order.최초발주일 || '날짜없음'} ~ ${order.최종입고일 || '진행중'}\n                                </span>\n                                <span class=\"order-amount\">\n                                    ${Object.values(order.차수별발주).some(차수 => \n                                        차수.items.some(item => item.원화발주액)) ?\n                                        `<i class=\"fas fa-won-sign\"></i>\n                                         ${Object.values(order.차수별발주)\n                                            .flatMap(차수 => 차수.items)\n                                            .reduce((sum, item) => sum + (item.원화발주액 || 0), 0)\n                                            .toLocaleString()}` :\n                                        `<i class=\"fas fa-dollar-sign\"></i>\n                                         ${order.총발주액.toLocaleString()}`\n                                    }\n                                    ${order.총잔액 > 0 ? \n                                        `<span class=\"remaining-amount\">(잔금: $${order.총잔액.toLocaleString()})</span>` \n                                        : ''}\n                                </span>\n                            </div>\n                        </div>\n                        <button class=\"toggle-details\">\n                            <i class=\"fas fa-chevron-down\"></i>\n                        </button>\n                    </div>\n                </div>`;\n\n            // 3개의 카드마다 또는 마지막 카드 후에 상세 정보 컨테이너 추가\n            if ((index + 1) % 3 === 0 || index === data.length - 1) {\n                const rowStartIndex = Math.floor(index / 3) * 3;\n                const rowEndIndex = Math.min(rowStartIndex + 3, data.length);\n                const rowIndex = Math.floor(index / 3);\n                \n                html += `<div class=\"details-container\" data-row=\"${rowIndex}\">`;\n                \n                // 현재 행의 카드들에 대한 상세 정보 추가\n                for (let i = rowStartIndex; i < rowEndIndex; i++) {\n                    if (i < data.length) {  // 배열 범위 체크 추가\n                        const rowOrder = data[i];\n                        html += `\n                            <div class=\"order-card-details\" data-order=\"${rowOrder.발주코드}\">\n                                ${this.generateOrderCardDetails(rowOrder)}\n                            </div>`;\n                    }\n                }\n                \n                html += '</div>';\n            }\n        });\n\n        return html;\n    }\n\n    setupCardEventListeners(container) {\n        if (!container) return;\n\n        const cards = container.querySelectorAll('.order-card');\n        cards.forEach((card, index) => {\n            const toggleBtn = card.querySelector('.toggle-details');\n            const icon = toggleBtn?.querySelector('i');\n            const rowIndex = Math.floor(index / 3);\n            const detailsContainer = container.querySelector(`.details-container[data-row=\"${rowIndex}\"]`);\n            const cardDetails = detailsContainer?.querySelector(`.order-card-details[data-order=\"${card.dataset.order}\"]`);\n\n            if (toggleBtn && icon && detailsContainer && cardDetails) {\n                toggleBtn.addEventListener('click', (e) => {\n                    e.stopPropagation();\n                    \n                    // 다른 모든 카드를 닫습니다\n                    cards.forEach(otherCard => {\n                        if (otherCard !== card) {\n                            otherCard.classList.remove('expanded');\n                            const otherIcon = otherCard.querySelector('.toggle-details i');\n                            if (otherIcon) {\n                                otherIcon.classList.remove('fa-chevron-up');\n                                otherIcon.classList.add('fa-chevron-down');\n                            }\n                        }\n                    });\n\n                    // 현재 카드를 토글합니다\n                    const isExpanding = !card.classList.contains('expanded');\n                    \n                    if (isExpanding) {\n                        // 다른 모든 상세 정보를 숨깁니다\n                        container.querySelectorAll('.details-container').forEach(dc => {\n                            if (dc !== detailsContainer) {\n                                dc.style.display = 'none';\n                            }\n                        });\n                        container.querySelectorAll('.order-card-details').forEach(details => {\n                            if (details !== cardDetails) {\n                                details.style.display = 'none';\n                            }\n                        });\n                        \n                        // 현재 카드의 상세 정보를 표시합니다\n                        card.classList.add('expanded');\n                        icon.classList.remove('fa-chevron-down');\n                        icon.classList.add('fa-chevron-up');\n                        detailsContainer.style.display = 'block';\n                        cardDetails.style.display = 'block';\n                        \n                        // 스크롤 위치 조정\n                        const cardRect = card.getBoundingClientRect();\n                        const scrollTarget = window.scrollY + cardRect.top - 20;\n                        window.scrollTo({\n                            top: scrollTarget,\n                            behavior: 'smooth'\n                        });\n                    } else {\n                        card.classList.remove('expanded');\n                        icon.classList.remove('fa-chevron-up');\n                        icon.classList.add('fa-chevron-down');\n                        detailsContainer.style.display = 'none';\n                        cardDetails.style.display = 'none';\n                    }\n                });\n            }\n        });\n    }\n\n    generateOrderCardDetails(order) {\n        return Object.values(order.차수별발주 || {})\n            .map(차수 => `\n                <div class=\"order-phase\">\n                    <div class=\"phase-items\">\n                        ${차수.items.map(item => {\n                            const 원화환산액 = (item.선금송금액 * item.선금환율) + \n                                             (item.잔금송금액 * item.잔금환율) + \n                                             (item.원화발주액 || 0);\n                            const 입항후비용 = Number(item.입항후비용 || 0);\n                            const 제품원가 = item.발주수량 > 0 ? (원화환산액 + 입항후비용) / item.발주수량 : 0;\n\n                            return `\n                                <div class=\"order-item\">\n                                    <div class=\"item-header\">\n                                        <div class=\"item-title\">\n                                            <div class=\"item-badges\">\n                                                <span class=\"status-badge ${item.상태.toLowerCase()}\">${item.상태}</span>\n                                                <span class=\"phase-badge\">${차수.발주차수}</span>\n                                            </div>\n                                            <h5>${item.발주명}</h5>\n                                        </div>\n                                    </div>\n                                    <div class=\"item-details\">\n                                        <div class=\"item-info\">\n                                            <p><strong>발주일:</strong> ${item.발주일 || '-'}</p>\n                                            <p><strong>입항예정일:</strong> ${item.입항예정일 || '-'}</p>\n                                            <p><strong>최종입고일:</strong> ${item.최종입고일 || '-'}</p>\n                                            <p><strong>수량:</strong> ${item.발주수량.toLocaleString()}개</p>\n                                            <p><strong>단가:</strong> ${item.원화발주액 ? \n                                                `₩${item.원화발주액.toLocaleString()}` : \n                                                `$${item.단가.toLocaleString()}`}</p>\n                                            <p><strong>발주액:</strong> ${item.원화발주액 ? \n                                                `₩${item.원화발주액.toLocaleString()}` : \n                                                `$${item.발주액.toLocaleString()}`}</p>\n                                        </div>\n                                        <div class=\"item-status\">\n                                            <p><strong>선금송금액:</strong> ${item.선금송금액 ? \n                                                `$${item.선금송금액.toLocaleString()}` : \n                                                '-'}</p>\n                                            <p><strong>잔금송금액:</strong> ${item.잔금송금액 ? \n                                                `$${item.잔금송금액.toLocaleString()}` : \n                                                '-'}</p>\n                                            <p><strong>원화환산:</strong> ₩${Math.round(원화환산액).toLocaleString()}</p>\n                                            <p><strong>입항후비용:</strong> ₩${Math.round(입항후비용).toLocaleString()}</p>\n                                            <p><strong>제품원가:</strong> ₩${Math.round(제품원가).toLocaleString()}/개</p>\n                                        </div>\n                                    </div>\n                                </div>\n                            `;\n                        }).join('')}\n                    </div>\n                </div>\n            `).join('');\n    }\n\n    generateOrderItemHTML(item) {\n        const 원화환산액 = (item.선금송금액 * item.선금환율) + \n                         (item.잔금송금액 * item.잔금환율) + \n                         (item.원화발주액 || 0);\n        const 입항후비용 = Number(item.입항후비용 || 0);\n        const 제품원가 = item.발주수량 > 0 ? (원화환산액 + 입항후비용) / item.발주수량 : 0;\n\n        return `\n            <div class=\"order-item\">\n                <div class=\"item-header\">\n                    <h5>${item.발주명}</h5>\n                    <span class=\"status-badge ${item.상태.toLowerCase()}\">${item.상태}</span>\n                </div>\n                <div class=\"item-details\">\n                    <div class=\"item-info\">\n                        <p><strong>발주일:</strong> ${item.발주일 || '-'}</p>\n                        <p><strong>입항예정일:</strong> ${item.입항예정일 || '-'}</p>\n                        <p><strong>최종입고일:</strong> ${item.최종입고일 || '-'}</p>\n                        <p><strong>수량:</strong> ${item.발주수량.toLocaleString()}개</p>\n                        <p><strong>단가:</strong> ${item.원화발주액 ? \n                            `₩${item.원화발주액.toLocaleString()}` : \n                            `$${item.단가.toLocaleString()}`}</p>\n                        <p><strong>발주액:</strong> ${item.원화발주액 ? \n                            `₩${item.원화발주액.toLocaleString()}` : \n                            `$${item.발주액.toLocaleString()}`}</p>\n                    </div>\n                    <div class=\"item-status\">\n                        <p><strong>선금송금액:</strong> ${item.선금송금액 ? \n                            `$${item.선금송금액.toLocaleString()} (₩${Math.round(item.선금송금액 * item.선금환율).toLocaleString()})` : \n                            '-'}</p>\n                        <p><strong>잔금송금액:</strong> ${item.잔금송금액 ? \n                            `$${item.잔금송금액.toLocaleString()} (₩${Math.round(item.잔금송금액 * item.잔금환율).toLocaleString()})` : \n                            '-'}</p>\n                        <p><strong>원화환산:</strong> ₩${Math.round(원화환산액).toLocaleString()}</p>\n                        <p><strong>입항후비용:</strong> ₩${Math.round(입항후비용).toLocaleString()}</p>\n                        <p><strong>제품원가:</strong> ₩${Math.round(제품원가).toLocaleString()}/개</p>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    updateStats(stats) {\n        const container = document.querySelector('.order-stats');\n        if (!container) return;\n\n        container.innerHTML = `\n            <div class=\"order-stat-box\">\n                <h3>발주 현황</h3>\n                <div class=\"order-stat-value\">${Object.values(stats.statusCount).reduce((a, b) => a + b, 0)}건</div>\n                <div class=\"order-stat-details\">\n                    ${Object.entries(stats.statusCount).map(([status, count]) => `\n                        <div class=\"order-stat-detail\">\n                            <span class=\"detail-label\">${status}:</span>\n                            <span class=\"detail-value\">${count}건</span>\n                        </div>\n                    `).join('')}\n                </div>\n            </div>\n                <div class=\"order-stat-box\">\n                <h3>발주액</h3>\n                <div class=\"order-stat-details\">\n                    <div class=\"order-stat-detail usd-amount\">\n                        <span class=\"detail-label\">USD 총 발주액:</span>\n                        <span class=\"detail-value\">$${Math.round(stats.totalAmountUSD).toLocaleString()}</span>\n                    </div>\n                    <div class=\"order-stat-detail krw-amount\">\n                        <span class=\"detail-label\">원화 총 발주액:</span>\n                        <span class=\"detail-value\">₩${Math.round(stats.totalWonAmount).toLocaleString()}</span>\n                    </div>\n                    <div class=\"order-stat-detail section-divider usd-amount\">\n                        <span class=\"detail-label\">송금 총액 (USD):</span>\n                        <span class=\"detail-value\">$${Math.round(stats.totalPaidUSD).toLocaleString()}</span>\n                    </div>\n                    <div class=\"order-stat-detail remaining\">\n                        <span class=\"detail-label\">잔금 총액 (USD):</span>\n                        <span class=\"detail-value\">$${Math.round(stats.totalRemainingUSD).toLocaleString()}</span>\n                    </div>\n                    <div class=\"order-stat-detail section-divider usd-amount\">\n                        <span class=\"detail-label\">USD 송금 원화환산:</span>\n                        <span class=\"detail-value\">₩${Math.round(stats.totalUSDtoKRW).toLocaleString()}</span>\n                    </div>\n                    <div class=\"order-stat-detail krw-amount\">\n                        <span class=\"detail-label\">원화 발주 송금액:</span>\n                        <span class=\"detail-value\">₩${Math.round(stats.totalWonAmount).toLocaleString()}</span>\n                    </div>\n                    <div class=\"order-stat-detail section-divider\">\n                        <span class=\"detail-label\">제품발주비용:</span>\n                        <span class=\"detail-value\">₩${Math.round(stats.totalProductCost).toLocaleString()}</span>\n                    </div>\n                    <div class=\"order-stat-detail post-arrival\">\n                        <span class=\"detail-label\">입항후비용:</span>\n                        <span class=\"detail-value\">₩${Math.round(stats.totalPostArrivalCost).toLocaleString()}</span>\n                    </div>\n                    <div class=\"order-stat-detail total\">\n                        <span class=\"detail-label\">발주관련 총액:</span>\n                        <span class=\"detail-value\">₩${Math.round(stats.totalOrderAmount).toLocaleString()}</span>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    setupDateFilter() {\n        const dateFilter = document.getElementById('orderDateFilter');\n        const dateRangeInput = document.getElementById('orderDateRange');\n        const customDateRange = document.querySelector('.custom-date-range');\n\n        if (dateFilter) {\n            dateFilter.addEventListener('change', (e) => {\n                const selectedValue = e.target.value;\n                \n                if (selectedValue === 'custom') {\n                    customDateRange?.classList.remove('hidden');\n                    return;\n                }\n                \n                customDateRange?.classList.add('hidden');\n                \n                if (selectedValue === 'all') {\n                    this.renderTable(this.data);\n                } else {\n                    const dates = this.getDateRangeFromFilter(selectedValue);\n                    if (dates) {\n                        this.filterOrdersByDate(dates.startDate, dates.endDate);\n                    }\n                }\n            });\n        }\n\n        if (dateRangeInput) {\n            flatpickr(dateRangeInput, {\n                mode: 'range',\n                dateFormat: 'Y-m-d',\n                locale: 'ko',\n                onChange: (selectedDates) => {\n                    if (selectedDates.length === 2) {\n                        const [startDate, endDate] = selectedDates;\n                        this.filterOrdersByDate(startDate, endDate);\n                    }\n                }\n            });\n        }\n    }\n\n    getDateRangeFromFilter(filter) {\n        const now = new Date();\n        const endDate = new Date(now);\n        let startDate = new Date(now);\n\n        switch (filter) {\n            case '1month':\n                startDate.setMonth(now.getMonth() - 1);\n                break;\n            case '3months':\n                startDate.setMonth(now.getMonth() - 3);\n                break;\n            case '6months':\n                startDate.setMonth(now.getMonth() - 6);\n                break;\n            case '1year':\n                startDate.setFullYear(now.getFullYear() - 1);\n                break;\n            case 'all':\n                return null;\n            default:\n                return null;\n        }\n\n        return { startDate, endDate };\n    }\n} ","import { NotionService } from '../services/notionService.js';\nimport Chart from 'https://cdn.jsdelivr.net/npm/chart.js/auto/auto.mjs';\n\nexport class CashFlowManager {\n    constructor() {\n        this.notionService = new NotionService('d04c779e1ee84e6d9dd062823ebb4ff8');\n        this.container = document.getElementById('cashFlowContainer');\n        this.charts = {};\n        this.initialize();\n    }\n\n    async initialize() {\n        try {\n            this.container.innerHTML = '<div class=\"loading\">데이터를 불러오는 중...</div>';\n            \n            const response = await this.notionService.fetchDatabase();\n            console.log('Notion API 응답:', response); // 응답 데이터 확인용 로그\n\n            // response가 undefined이거나 results 속성이 없는 경우 처리\n            if (!response || !Array.isArray(response)) {\n                throw new Error('유효하지 않은 데이터 형식');\n            }\n\n            const processedData = this.processNotionData(response);\n            this.renderDashboard(processedData);\n        } catch (error) {\n            console.error('자금관리 데이터 초기화 중 오류:', error);\n            this.container.innerHTML = `\n                <div class=\"error-message\">\n                    데이터를 불러오는데 실패했습니다.<br>\n                    <small>${error.message}</small>\n                </div>\n            `;\n        }\n    }\n\n    processNotionData(data) {\n        try {\n            if (!Array.isArray(data)) {\n                console.error('유효하지 않은 데이터 형식:', data);\n                return [];\n            }\n\n            return data.map(page => {\n                if (!page || !page.properties) {\n                    console.warn('유효하지 않은 페이지 데이터:', page);\n                    return null;\n                }\n\n                const props = page.properties;\n                return {\n                    id: page.id,\n                    날짜: props.날짜?.date?.start || '',\n                    항목: props.항목?.title?.[0]?.plain_text || '',\n                    금액: props.금액?.number || 0,\n                    합계: props.합계?.number || 0,\n                    구분: props.카테고리?.select?.name || '',\n                    거래원천: props.거래원천?.select?.name || '',\n                    수입비용: props['수입/비용']?.select?.name || '',\n                    receipt: props.Receipt?.files || [],\n                    created_time: props['Created time']?.created_time || '',\n                    발주제품송금: props.발주제품송금?.checkbox || false,\n                    비고: props.비고?.rich_text?.[0]?.plain_text || ''\n                };\n            }).filter(item => item !== null);\n        } catch (error) {\n            console.error('데이터 처리 중 오류:', error);\n            return [];\n        }\n    }\n\n    renderDashboard(data) {\n        const container = document.createElement('div');\n        container.className = 'cash-flow-container';\n\n        // 요약 정보\n        const summaryData = this.calculateSummary(data);\n        const summarySection = this.createSummarySection(summaryData);\n        container.appendChild(summarySection);\n\n        // 차트 섹션\n        const chartSection = this.createChartSection(data);\n        container.appendChild(chartSection);\n\n        // 거래 내역 목록\n        const transactionList = this.createTransactionList(data);\n        container.appendChild(transactionList);\n\n        this.container.innerHTML = '';\n        this.container.appendChild(container);\n\n        // 차트 렌더링\n        this.renderCharts(data);\n    }\n\n    calculateSummary(data) {\n        const summary = data.reduce((acc, item) => {\n            const amount = item.원화계산총금 || 0;\n            const type = item.수입비용 || '기타';\n            const category = item.거래구분 || '기타';\n            \n            // 수입/지출 합계\n            if (type === '수입') {\n                acc.totalIncome += amount;\n            } else if (type === '지출') {\n                acc.totalExpense += amount;\n            }\n            \n            // 카테고리별 집계\n            if (!acc.categoryTotals[category]) {\n                acc.categoryTotals[category] = 0;\n            }\n            acc.categoryTotals[category] += amount;\n\n            // 월별 집계\n            const month = item.날짜.substring(0, 7);\n            if (!acc.monthlyTotals[month]) {\n                acc.monthlyTotals[month] = { income: 0, expense: 0 };\n            }\n            if (type === '수입') {\n                acc.monthlyTotals[month].income += amount;\n            } else {\n                acc.monthlyTotals[month].expense += amount;\n            }\n            \n            return acc;\n        }, {\n            totalIncome: 0,\n            totalExpense: 0,\n            categoryTotals: {},\n            monthlyTotals: {}\n        });\n\n        summary.balance = summary.totalIncome - summary.totalExpense;\n        return summary;\n    }\n\n    createSummarySection(summaryData) {\n        const section = document.createElement('div');\n        section.className = 'cash-flow-summary';\n        \n        section.innerHTML = `\n            <div class=\"cash-flow-box income\">\n                <h3>총 수입</h3>\n                <div class=\"cash-flow-amount\">₩${Math.round(summaryData.totalIncome).toLocaleString()}</div>\n            </div>\n            <div class=\"cash-flow-box expense\">\n                <h3>총 지출</h3>\n                <div class=\"cash-flow-amount\">₩${Math.abs(Math.round(summaryData.totalExpense)).toLocaleString()}</div>\n            </div>\n            <div class=\"cash-flow-box balance\">\n                <h3>잔액</h3>\n                <div class=\"cash-flow-amount ${summaryData.balance >= 0 ? 'positive' : 'negative'}\">\n                    ₩${Math.round(summaryData.balance).toLocaleString()}\n                </div>\n            </div>\n        `;\n        \n        return section;\n    }\n\n    createChartSection(data) {\n        const section = document.createElement('div');\n        section.className = 'cash-flow-charts';\n        \n        section.innerHTML = `\n            <div class=\"cash-flow-chart-box\">\n                <h3>월별 수입/지출 추이</h3>\n                <canvas id=\"monthlyTrendChart\"></canvas>\n            </div>\n            <div class=\"cash-flow-chart-box\">\n                <h3>거래구분별 분포</h3>\n                <canvas id=\"categoryPieChart\"></canvas>\n            </div>\n        `;\n        \n        return section;\n    }\n\n    renderCharts(data) {\n        this.renderMonthlyTrendChart(data);\n        this.renderCategoryPieChart(data);\n    }\n\n    renderMonthlyTrendChart(data) {\n        const ctx = document.getElementById('monthlyTrendChart');\n        if (this.charts.monthlyTrend) {\n            this.charts.monthlyTrend.destroy();\n        }\n\n        const monthlyData = this.calculateMonthlyTotals(data);\n        \n        this.charts.monthlyTrend = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: monthlyData.labels,\n                datasets: [\n                    {\n                        label: '수입',\n                        data: monthlyData.income,\n                        borderColor: '#4CAF50',\n                        backgroundColor: 'rgba(76, 175, 80, 0.1)',\n                        fill: true\n                    },\n                    {\n                        label: '지출',\n                        data: monthlyData.expense,\n                        borderColor: '#F44336',\n                        backgroundColor: 'rgba(244, 67, 54, 0.1)',\n                        fill: true\n                    }\n                ]\n            },\n            options: {\n                responsive: true,\n                plugins: {\n                    title: {\n                        display: true,\n                        text: '월별 현금흐름'\n                    }\n                }\n            }\n        });\n    }\n\n    renderCategoryPieChart(data) {\n        const ctx = document.getElementById('categoryPieChart');\n        if (this.charts.categoryPie) {\n            this.charts.categoryPie.destroy();\n        }\n\n        const categoryData = this.calculateCategoryTotals(data);\n        \n        this.charts.categoryPie = new Chart(ctx, {\n            type: 'doughnut',\n            data: {\n                labels: categoryData.labels,\n                datasets: [{\n                    data: categoryData.values,\n                    backgroundColor: [\n                        '#4CAF50', '#2196F3', '#F44336', '#FFC107', \n                        '#9C27B0', '#FF5722', '#795548', '#607D8B'\n                    ]\n                }]\n            },\n            options: {\n                responsive: true,\n                plugins: {\n                    legend: {\n                        position: 'right'\n                    }\n                }\n            }\n        });\n    }\n\n    calculateMonthlyTotals(data) {\n        const monthlyTotals = {};\n        \n        data.forEach(item => {\n            const month = item.날짜.substring(0, 7);\n            if (!monthlyTotals[month]) {\n                monthlyTotals[month] = { income: 0, expense: 0 };\n            }\n            \n            if (item.수입비용 === '수입') {\n                monthlyTotals[month].income += item.원화계산총금;\n            } else {\n                monthlyTotals[month].expense += item.원화계산총금;\n            }\n        });\n\n        const sortedMonths = Object.keys(monthlyTotals).sort();\n        \n        return {\n            labels: sortedMonths,\n            income: sortedMonths.map(month => monthlyTotals[month].income),\n            expense: sortedMonths.map(month => monthlyTotals[month].expense)\n        };\n    }\n\n    calculateCategoryTotals(data) {\n        const categoryTotals = {};\n        \n        data.forEach(item => {\n            const category = item.거래구분 || '기타';\n            if (!categoryTotals[category]) {\n                categoryTotals[category] = 0;\n            }\n            categoryTotals[category] += Math.abs(item.원화계산총금);\n        });\n\n        return {\n            labels: Object.keys(categoryTotals),\n            values: Object.values(categoryTotals)\n        };\n    }\n\n    createTransactionList(data) {\n        const section = document.createElement('div');\n        section.className = 'cash-flow-transactions';\n        \n        const sortedData = [...data].sort((a, b) => \n            new Date(b.날짜) - new Date(a.날짜)\n        );\n\n        section.innerHTML = `\n            <h3>거래 내역</h3>\n            <div class=\"cash-flow-table\">\n                <table>\n                    <thead>\n                        <tr>\n                            <th>날짜</th>\n                            <th>항목</th>\n                            <th>금액</th>\n                            <th>구분</th>\n                            <th>비고</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        ${sortedData.map(item => `\n                            <tr class=\"${item.수입비용 === '수입' ? 'income-row' : 'expense-row'}\">\n                                <td>${item.날짜}</td>\n                                <td>${item.항목}</td>\n                                <td class=\"cash-flow-amount-cell\">\n                                    ₩${Math.abs(item.금액).toLocaleString()}\n                                </td>\n                                <td>${item.구분}</td>\n                                <td>${item.비고}</td>\n                            </tr>\n                        `).join('')}\n                    </tbody>\n                </table>\n            </div>\n        `;\n\n        return section;\n    }\n} ","import { NotionService } from '../services/notionService.js';\n\nexport class TotalSales {\n    constructor(dataService) {\n        this.dataService = dataService;\n        this.currentYear = '2025';\n        this.monthlySalesChart = null;\n        this.adNotionService = new NotionService('d04c779e1ee84e6d9dd062823ebb4ff8');\n        this.groupNotionService = new NotionService('e6121c39c37c4d349032829e5b796c2c');\n        this.initializeYearSelector();\n        this.initializeChart();\n    }\n\n    initializeYearSelector() {\n        const yearButtons = document.querySelectorAll('.year-btn');\n        yearButtons.forEach(button => {\n            button.addEventListener('click', async (e) => {\n                yearButtons.forEach(btn => btn.classList.remove('active'));\n                e.target.classList.add('active');\n                this.currentYear = e.target.dataset.year;\n                await this.updateSalesData();\n            });\n        });\n    }\n\n    \n    initializeChart() {\n        const ctx = document.getElementById('monthlySalesChart').getContext('2d');\n        this.monthlySalesChart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월'],\n                datasets: [\n                    {\n                        label: '스토어 매출',\n                        backgroundColor: 'rgba(169, 186, 147, 0.7)',\n                        data: []\n                    },\n                    {\n                        label: '유료광고 수익',\n                        backgroundColor: 'rgba(147, 165, 186, 0.7)',\n                        data: []\n                    },\n                    {\n                        label: '공동구매 매출',\n                        backgroundColor: 'rgba(195, 177, 171, 0.7)',\n                        data: []\n                    }\n                ]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    x: {\n                        stacked: true\n                    },\n                    y: {\n                        stacked: true,\n                        beginAtZero: true,\n                        ticks: {\n                            callback: function(value) {\n                                return value.toLocaleString() + '원';\n                            }\n                        }\n                    }\n                },\n                plugins: {\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                return `${context.dataset.label}: ${context.raw.toLocaleString()}원`;\n                            }\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    async updateSalesData() {\n        try {\n            const monthlySales = await this.calculateMonthlySales();\n            this.updateTable(monthlySales);\n            this.updateChart(monthlySales);\n        } catch (error) {\n            console.error('매출 데이터 업데이트 중 오류:', error);\n        }\n    }\n\n    async calculateMonthlySales() {\n        const monthlySales = Array(12).fill().map(() => ({\n            storeSales: 0,\n            adSales: 0,\n            groupSales: 0\n        }));\n\n        try {\n            // 스토어 매출 계산 - Dashboard와 동일한 로직 적용\n            const storeData = this.dataService.getCurrentData();\n            storeData.forEach(item => {\n                const date = new Date(item.date);\n                if (date.getFullYear().toString() === this.currentYear) {\n                    const month = date.getMonth();\n                    const quantity = parseInt(item.quantity) || 0;\n                    \n                    // Dashboard와 동일한 매핑 로직 적용\n                    const originalProduct = item.originalProduct || item.productName || '';\n                    const originalOption = item.originalOption || '';\n                    const mappingInfo = this.dataService.mappingService.getMappedProductInfo(\n                        originalProduct,\n                        originalOption,\n                        item.channel || item.seller\n                    );\n\n                    let price = 0;\n                    if (mappingInfo) {\n                        // 취소/반품 주문은 매출 0으로 처리\n                        price = ['취소', '미결제취소', '반품'].includes(item.orderStatus) ? 0 : mappingInfo.price;\n                    }\n\n                    const sales = quantity * price;\n                    \n                    // 취소/반품이 아닌 경우에만 매출에 포함\n                    if (!['취소', '미결제취소', '반품'].includes(item.orderStatus)) {\n                        monthlySales[month].storeSales += sales;\n                    }\n                }\n            });\n\n            // 유료광고 수익 계산\n            const adData = await this.adNotionService.fetchDatabase();\n            adData.forEach(item => {\n                if (item.properties?.['정산입금일자']?.date?.start) {\n                    const date = new Date(item.properties['정산입금일자'].date.start);\n                    if (date.getFullYear().toString() === this.currentYear) {\n                        monthlySales[date.getMonth()].adSales += item.properties['정산금액']?.number || 0;\n                    }\n                }\n            });\n\n            // 공동구매 매출 계산\n            const groupData = await this.groupNotionService.fetchDatabase();\n            groupData.forEach(item => {\n                if (item.properties?.['일정']?.date?.end) {\n                    const endDate = new Date(item.properties['일정'].date.end);\n                    if (endDate.getFullYear().toString() === this.currentYear) {\n                        monthlySales[endDate.getMonth()].groupSales += item.properties['매출액']?.number || 0;\n                    }\n                }\n            });\n\n            // 디버깅을 위한 로그\n            console.log('Monthly Sales Data:', {\n                storeData: storeData.length,\n                monthlySales,\n                year: this.currentYear\n            });\n\n            return monthlySales;\n        } catch (error) {\n            console.error('월별 매출 계산 중 오류:', error);\n            throw error;\n        }\n    }\n\n    updateTable(monthlySales) {\n        const tbody = document.getElementById('monthlySalesBody');\n        tbody.innerHTML = '';\n\n        let totalStoreSales = 0;\n        let totalAdSales = 0;\n        let totalGroupSales = 0;\n\n        monthlySales.forEach((data, index) => {\n            // 메인 행\n            const mainRow = document.createElement('tr');\n            mainRow.classList.add('main-row');\n            const total = data.storeSales + data.adSales + data.groupSales;\n            \n            mainRow.innerHTML = `\n                <td class=\"month-cell\">\n                    <span class=\"expand-btn\">+</span>\n                    ${index + 1}월\n                </td>\n                <td>${data.storeSales.toLocaleString()}원</td>\n                <td>${data.adSales.toLocaleString()}원</td>\n                <td>${data.groupSales.toLocaleString()}원</td>\n                <td>${total.toLocaleString()}원</td>\n            `;\n\n            // 상세 정보 행\n            const detailRow = document.createElement('tr');\n            detailRow.classList.add('detail-row');\n            detailRow.style.display = 'none';\n            \n            // 상세 정보 셀\n            const detailCell = document.createElement('td');\n            detailCell.colSpan = 5;\n            detailCell.innerHTML = `\n                <div class=\"sales-details\">\n                    <div class=\"detail-section\">\n                        <h4>스토어 매출 상세</h4>\n                        <div class=\"sales-detail-grid\">\n                            <div class=\"sales-detail-item\">\n                                <div class=\"store-name\">스마트스토어</div>\n                                <div class=\"store-amount\">${this.formatCurrency(data.storeSales * 0.7)}</div>\n                            </div>\n                            <div class=\"sales-detail-item\">\n                                <div class=\"store-name\">오늘의집</div>\n                                <div class=\"store-amount\">${this.formatCurrency(data.storeSales * 0.2)}</div>\n                            </div>\n                            <div class=\"sales-detail-item\">\n                                <div class=\"store-name\">유튜브쇼핑</div>\n                                <div class=\"store-amount\">${this.formatCurrency(data.storeSales * 0.1)}</div>\n                            </div>\n                        </div>\n                    </div>\n                    \n                    ${data.adSales > 0 ? `\n                        <div class=\"detail-section\">\n                            <h4>유료광고 수익 상세</h4>\n                            <div class=\"sales-detail-grid\">\n                                <div class=\"sales-detail-item\">\n                                    <div class=\"store-name\">유료광고 수익 상세</div>\n                                    <div class=\"store-amount\">${this.formatCurrency(data.adSales)}</div>\n                                </div>\n                            </div>\n                        </div>\n                    ` : ''}\n                    \n                    ${data.groupSales > 0 ? `\n                        <div class=\"detail-section\">\n                            <h4>공동구매 매출 상세</h4>\n                            <div class=\"sales-detail-grid\">\n                                <div class=\"sales-detail-item\">\n                                    <div class=\"store-name\">공동구매 매출 상세</div>\n                                    <div class=\"store-amount\">${this.formatCurrency(data.groupSales)}</div>\n                                </div>\n                            </div>\n                        </div>\n                    ` : ''}\n                </div>\n            `;\n            detailRow.appendChild(detailCell);\n\n            // 이벤트 리스너 추가\n            mainRow.querySelector('.expand-btn').addEventListener('click', async (e) => {\n                const btn = e.target;\n                const isExpanded = btn.textContent === '-';\n                btn.textContent = isExpanded ? '+' : '-';\n                detailRow.style.display = isExpanded ? 'none' : 'table-row';\n\n                if (!isExpanded && !detailRow.dataset.loaded) {\n                    await this.loadDetailData(index + 1, detailRow);\n                    detailRow.dataset.loaded = 'true';\n                }\n            });\n\n            tbody.appendChild(mainRow);\n            tbody.appendChild(detailRow);\n\n            totalStoreSales += data.storeSales;\n            totalAdSales += data.adSales;\n            totalGroupSales += data.groupSales;\n        });\n\n        // 합계 업데이트\n        document.getElementById('totalStoreSales').textContent = `${totalStoreSales.toLocaleString()}원`;\n        document.getElementById('totalAdSales').textContent = `${totalAdSales.toLocaleString()}원`;\n        document.getElementById('totalGroupSales').textContent = `${totalGroupSales.toLocaleString()}원`;\n        document.getElementById('grandTotal').textContent = \n            `${(totalStoreSales + totalAdSales + totalGroupSales).toLocaleString()}원`;\n    }\n\n    async fetchMonthlyDetail(month) {\n        try {\n            // 스토어 매출 계산\n            const storeData = this.dataService.getCurrentData();\n            const currentYearData = storeData.filter(item => {\n                const date = new Date(item.date);\n                return date.getFullYear().toString() === this.currentYear &&\n                       date.getMonth() === month - 1;\n            });\n\n            const storeSales = currentYearData.reduce((total, item) => {\n                const quantity = parseInt(item.quantity) || 0;\n                const mappingInfo = this.dataService.mappingService.getMappedProductInfo(\n                    item.originalProduct || item.productName || '',\n                    item.originalOption || '',\n                    item.channel || item.seller\n                );\n                const price = mappingInfo ? mappingInfo.price : 0;\n                return total + (quantity * price);\n            }, 0);\n\n            // 광고 수익과 공동구매 매출 데이터 로드\n            const adData = await this.loadMonthlyAdData(month);\n            const groupData = await this.loadMonthlyGroupData(month);\n\n            // 광고 수익 합계 계산\n            const adSales = adData.reduce((total, item) => total + (item.정산금액 || 0), 0);\n            \n            // 공동구매 매출 합계 계산\n            const groupSales = groupData.reduce((total, item) => total + (item.매출액 || 0), 0);\n\n            return {\n                storeSales,\n                adSales,\n                groupSales\n            };\n        } catch (error) {\n            console.error('월별 상세 데이터 조회 중 오류:', error);\n            throw error;\n        }\n    }\n\n    async loadDetailData(month, detailRow) {\n        const detailCell = detailRow.querySelector('td[colspan=\"5\"]');\n        if (!detailCell) return;\n\n        // 먼저 로딩 상태 표시\n        detailCell.innerHTML = `\n            <div class=\"sales-details\">\n                <div class=\"loading-message\">데이터 로딩 중...</div>\n            </div>\n        `;\n\n        try {\n            // 모든 데이터를 한 번에 로드\n            const [channelSales, adData, groupData] = await Promise.all([\n                this.calculateChannelSales(month),\n                this.loadMonthlyAdData(month),\n                this.loadMonthlyGroupData(month)\n            ]);\n            \n            // 모든 데이터가 준비된 후에 표시\n            detailCell.innerHTML = `\n                <div class=\"sales-details\">\n                    <div class=\"detail-section\">\n                        <h4>스토어 매출 상세</h4>\n                        <div class=\"detail-content\">\n                            <p>스마트스토어: ${this.formatCurrency(channelSales['스마트스토어'])}</p>\n                            <p>오늘의집: ${this.formatCurrency(channelSales['오늘의집'])}</p>\n                            <p>유튜브쇼핑: ${this.formatCurrency(channelSales['유튜브쇼핑'])}</p>\n                        </div>\n                    </div>\n                    \n                    ${adData.length > 0 ? `\n                        <div class=\"detail-section\">\n                            <h4>유료광고 수익 상세</h4>\n                            <div class=\"detail-content\">\n                                ${adData.map(ad => `\n                                    <p>${ad.이름}: ${this.formatCurrency(ad.정산금액)}</p>\n                                `).join('')}\n                            </div>\n                        </div>\n                    ` : ''}\n                    \n                    ${groupData.length > 0 ? `\n                        <div class=\"detail-section\">\n                            <h4>공동구매 매출 상세</h4>\n                            <div class=\"detail-content\">\n                                ${groupData.map(group => `\n                                    <p>${group.이름}: ${this.formatCurrency(group.매출액)}</p>\n                                `).join('')}\n                            </div>\n                        </div>\n                    ` : ''}\n                </div>\n            `;\n        } catch (error) {\n            console.error('상세 데이터 로드 중 오류:', error);\n            detailCell.innerHTML = `\n                <div class=\"sales-details\">\n                    <div class=\"error-message\">데이터 로드 중 오류가 발생했습니다.</div>\n                </div>\n            `;\n        }\n    }\n\n    calculateChannelSales(month) {\n        const channelSales = {\n            '스마트스토어': 0,\n            '오늘의집': 0,\n            '유튜브쇼핑': 0\n        };\n\n        const storeData = this.dataService.getCurrentData();\n        storeData.forEach(item => {\n            const date = new Date(item.date);\n            if (date.getFullYear().toString() === this.currentYear && date.getMonth() === month - 1) {\n                const channel = item.channel || item.seller;\n                const mappingInfo = this.dataService.mappingService.getMappedProductInfo(\n                    item.originalProduct || item.productName,\n                    item.originalOption,\n                    channel\n                );\n\n                if (mappingInfo && !['취소', '미결제취소', '반품'].includes(item.orderStatus)) {\n                    const sales = (parseInt(item.quantity) || 0) * mappingInfo.price;\n                    if (channelSales.hasOwnProperty(channel)) {\n                        channelSales[channel] += sales;\n                    }\n                }\n            }\n        });\n\n        return channelSales;\n    }\n\n    async loadMonthlyAdData(month) {\n        try {\n            const adData = await this.adNotionService.fetchDatabase();\n            return adData\n                .filter(item => {\n                    // null 체크 추가\n                    const dateProperty = item.properties?.['정산입금일자']?.date?.start;\n                    if (!dateProperty) return false;\n                    \n                    const date = new Date(dateProperty);\n                    return date.getFullYear().toString() === this.currentYear && \n                           date.getMonth() === month - 1;\n                })\n                .map(item => ({\n                    이름: item.properties?.['이름']?.title?.[0]?.plain_text || '이름 없음',\n                    정산금액: item.properties?.['정산금액']?.number || 0,\n                    정산입금일자: item.properties?.['정산입금일자']?.date?.start || ''\n                }));\n        } catch (error) {\n            console.error('광고 수익 데이터 로드 중 오류:', error);\n            return [];\n        }\n    }\n\n    async loadMonthlyGroupData(month) {\n        try {\n            const groupData = await this.groupNotionService.fetchDatabase();\n            return groupData\n                .filter(item => {\n                    // null 체크 추가\n                    const dateProperty = item.properties?.['일정']?.date?.end;\n                    if (!dateProperty) return false;\n                    \n                    const endDate = new Date(dateProperty);\n                    return endDate.getFullYear().toString() === this.currentYear && \n                           endDate.getMonth() === month - 1;\n                })\n                .map(item => ({\n                    이름: item.properties?.['이름']?.title?.[0]?.plain_text || '이름 없음',\n                    매출액: item.properties?.['매출액']?.number || 0,\n                    정산금액: item.properties?.['정산금액']?.number || 0\n                }));\n        } catch (error) {\n            console.error('공동구매 데이터 로드 중 오류:', error);\n            return [];\n        }\n    }\n\n    updateChart(monthlySales) {\n        const storeSalesData = monthlySales.map(data => data.storeSales);\n        const adSalesData = monthlySales.map(data => data.adSales);\n        const groupSalesData = monthlySales.map(data => data.groupSales);\n\n        this.monthlySalesChart.data.datasets[0].data = storeSalesData;\n        this.monthlySalesChart.data.datasets[1].data = adSalesData;\n        this.monthlySalesChart.data.datasets[2].data = groupSalesData;\n        this.monthlySalesChart.update();\n    }\n\n    formatCurrency(amount) {\n        if (typeof amount === 'number') {\n            return amount.toLocaleString('ko-KR') + '원';\n        }\n        return '0원';\n    }\n} ","import { DateUtils } from './utils/dateUtils.js';\nimport { FormatUtils } from './utils/formatUtils.js';\nimport { AuthService } from './services/authService.js';\nimport { DataService } from './services/dataService.js';\nimport { Dashboard } from './components/dashboard.js';\nimport { MandalaChart } from './components/mandala.js';\nimport { TableManager } from './components/tables.js';\nimport { MappingService } from './services/mappingService.js';\nimport { OrderManager } from './components/order.js';\nimport { CashFlowManager } from './components/cashFlow.js';\nimport { TotalSales } from './components/totalSales.js';\n\nclass App {\n    constructor() {\n        // 탭 ID 상수 정의\n        this.TAB_IDS = {\n            DASHBOARD: 'dashboardTab',\n            DETAIL_DATA: 'detailDataTab',\n            MANDALA: 'mandalaTab',\n            ADDITIONAL_INFO: 'additionalInfoTab',\n            ORDER: 'orderTab',\n            CASH_FLOW: 'cashFlowTab',\n            TOTAL_SALES: 'totalSalesTab'\n        };\n\n        // 탭 ID 매핑 정의\n        this.TAB_MAPPING = {\n            'dashboard': this.TAB_IDS.DASHBOARD,\n            'detailData': this.TAB_IDS.DETAIL_DATA,\n            'mandala': this.TAB_IDS.MANDALA,\n            'additionalInfo': this.TAB_IDS.ADDITIONAL_INFO,\n            'order': this.TAB_IDS.ORDER,\n            'cashFlow': this.TAB_IDS.CASH_FLOW,\n            'totalSales': this.TAB_IDS.TOTAL_SALES\n        };\n\n        if (window.app) {\n            window.app.destroy();\n        }\n        \n        // 서비스 인스턴스 초기화\n        this.dataService = null;\n        this.authService = null;\n        this.ice = null;\n        this.dashboard = null;\n        this.tableManager = null;\n        \n        this.waitForDependencies()\n            .then(() => this.initialize())\n            .catch(error => {\n                console.error('초기화 실패:', error);\n            });\n        \n        // 날짜 선택기 초기화\n        this.initializeDatePicker();\n        this.initializeDateButtons();\n        this.initializeSidebar();\n    }\n\n    async waitForDependencies() {\n        // Firebase 초기화 대기\n        await this.waitForFirebase();\n        // GAPI 초기화 대기\n        await this.waitForGapi();\n        console.log('모든 의존성 로드 완료');\n    }\n\n    async waitForFirebase() {\n        for (let i = 0; i < 100; i++) {\n            if (window.firebase?.auth) {\n                console.log('Firebase 초기화 확인됨');\n                return;\n            }\n            await new Promise(resolve => setTimeout(resolve, 100));\n        }\n        throw new Error('Firebase 초기화 시간 초과');\n    }\n\n    async waitForGapi() {\n        for (let i = 0; i < 100; i++) {\n            if (typeof gapi !== 'undefined') {\n                console.log('GAPI 로드됨');\n                return;\n            }\n            await new Promise(resolve => setTimeout(resolve, 100));\n        }\n        throw new Error('GAPI 로드 시간 초과');\n    }\n\n    async initialize() {\n        try {\n            console.log('서비스 초기화 시작');\n            \n            // DataService 초기화\n            this.dataService = new DataService();\n            await this.dataService.initialize();\n            \n            // TableManager 초기화\n            this.tableManager = new TableManager(this.dataService);\n            \n            // Dashboard 초기화 (TableManager 전달)\n            this.dashboard = new Dashboard(this.dataService);\n            this.dashboard.tableManager = this.tableManager;\n            console.log('Dashboard 초기화됨:', !!this.dashboard);\n            \n            // AuthService 초기화\n            this.authService = new AuthService();\n            \n            // 발주 관리자 초기화\n            this.orderManager = new OrderManager();\n            \n            // 서비스 초기화 확인\n            if (!this.dataService || !this.authService || \n                !this.dashboard || !this.tableManager) {\n                throw new Error('서비스 초기화 실패');\n            }\n            \n            // 이벤트 리스너 설정\n            this.setupEventListeners();\n            \n            // 인증 상태 감지 설정\n            this.authService.onAuthStateChanged(async (user) => {\n                if (user) {\n                    document.getElementById('loginContainer').style.display = 'none';\n                    document.getElementById('contentContainer').style.display = 'block';\n                    document.getElementById('userEmail').textContent = user.email;\n                    await this.loadInitialData();\n                } else {\n                    document.getElementById('loginContainer').style.display = 'flex';\n                    document.getElementById('contentContainer').style.display = 'none';\n                    document.getElementById('userEmail').textContent = '';\n                }\n            });\n\n            // TotalSales 초기화\n            this.totalSales = new TotalSales(this.dataService);\n\n        } catch (error) {\n            console.error('초기화 중 오류:', error);\n            throw error;\n        }\n    }\n\n    async loadInitialData() {\n        try {\n            // 초기 데이터 로드\n            await this.dataService.initializeMappings();\n            const rawData = await this.dataService.loadData();\n            const processedData = await this.dataService.processData(rawData);\n            this.dataService.setCurrentData(processedData);\n            \n            // 대시보드 탭을 기본으로 활성화\n            await this.switchTab(this.TAB_IDS.DASHBOARD);\n            \n            // 이번달 버튼 활성화 및 데이터 필터링\n            const thisMonthButton = document.querySelector('[data-period=\"this-month\"]');\n            if (thisMonthButton) {\n                this.updateDateButtonStates(thisMonthButton);\n                await this.handleDateSelection('this-month');\n            }\n        } catch (error) {\n            console.error('초기 데이터 로드 실패:', error);\n        }\n    }\n\n    setupAuthStateListener() {\n        this.authService.onAuthStateChanged((user) => {\n            if (user) {\n                document.getElementById('loginContainer').style.display = 'none';\n                document.getElementById('contentContainer').style.display = 'block';\n                this.loadInitialData();\n            } else {\n                document.getElementById('loginContainer').style.display = 'flex';\n                document.getElementById('contentContainer').style.display = 'none';\n            }\n        });\n    }\n\n    destroy() {\n        if (this.ice) {\n            this.ice.destroyCharts();\n        }\n        \n        // 모든 서비스 정리\n        this.dataService = null;\n        this.authService = null;\n        this.dashboard = null;\n        this.tableManager = null;\n        this.ice = null;\n        \n        // 전역 참조 제거\n        window.ice = null;\n    }\n\n    async onLogin() {\n        try {\n            document.getElementById('loginContainer').style.display = 'none';\n            document.getElementById('contentContainer').style.display = 'block';\n            \n            const loadingIndicator = document.getElementById('loadingIndicator');\n            if (loadingIndicator) loadingIndicator.style.display = 'block';\n            \n            const rawData = await this.dataService.loadData();\n            \n            if (!rawData || rawData.length === 0) {\n                console.error('데이터를 불러오지 못했습니다.');\n                return;\n            }\n\n            const processedData = await this.dataService.processDetailData(rawData);\n            \n            const thisMonthButton = document.querySelector('[data-period=\"this-month\"]');\n            if (thisMonthButton) {\n                document.querySelectorAll('.date-selector').forEach(btn => {\n                    btn.classList.remove('active');\n                });\n                thisMonthButton.classList.add('active');\n                await this.handleDateSelection('this-month');\n            }\n\n            this.activateTab('dashboard');\n            \n            if (loadingIndicator) loadingIndicator.style.display = 'none';\n        } catch (error) {\n            console.error('데이터 로드 중 오류:', error);\n            alert('데이터를 불러오는 중 오류가 발생했습니다.');\n        }\n    }\n\n    async handleDateSelection(period, customStartDate = null, customEndDate = null) {\n        try {\n            localStorage.setItem('selectedPeriod', period);\n            if (customStartDate) localStorage.setItem('customStartDate', customStartDate);\n            if (customEndDate) localStorage.setItem('customEndDate', customEndDate);\n\n            let filteredData;\n            let startDate, endDate;\n\n            if (period === 'custom' && customStartDate && customEndDate) {\n                startDate = new Date(customStartDate);\n                startDate.setHours(0, 0, 0, 0);\n                endDate = new Date(customEndDate);\n                endDate.setHours(23, 59, 59, 999);\n                filteredData = await this.dataService.filterDataByDateRange(startDate, endDate);\n            } else {\n                const dateRange = DateUtils.calculateDateRange(period);\n                startDate = dateRange.startDate;\n                endDate = dateRange.endDate;\n                filteredData = await this.dataService.filterDataByPeriod(period);\n            }\n\n            document.dispatchEvent(new CustomEvent('dateFilterChanged', {\n                detail: {\n                    data: filteredData,\n                    period: period,\n                    startDate: startDate,\n                    endDate: endDate\n                }\n            }));\n\n            return filteredData;\n        } catch (error) {\n            console.error('날짜 선택 처리 중 오류:', error);\n            return [];\n        }\n    }\n\n    async filterDataByPeriod(period, startDate, endDate) {\n        try {\n            console.log('기간별 데이터 필터링 시작:', period);\n            \n            const currentData = this.dataService.getCurrentData();\n            if (!currentData || currentData.length === 0) {\n                console.warn('처리된 데이터가 없습니다.');\n                return [];\n            }\n\n            if (period === 'all') {\n                return currentData;\n            }\n\n            if (!startDate || !endDate) {\n                const now = new Date();\n                startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n                endDate = now;\n            }\n\n            const start = new Date(startDate);\n            const end = new Date(endDate);\n\n            start.setHours(0, 0, 0, 0);\n            end.setHours(23, 59, 59, 999);\n\n            console.log('필터링 기간:', {\n                시작일: start.toLocaleString('ko-KR'),\n                종료일: end.toLocaleString('ko-KR')\n            });\n\n            const filteredData = currentData.filter(item => {\n                const itemDate = new Date(item.date || item.orderDate);\n                const kstDate = new Date(itemDate.getTime() + (9 * 60 * 60 * 1000));\n                return kstDate >= start && kstDate <= end;\n            });\n\n            return filteredData;\n\n        } catch (error) {\n            console.error('데이터 필터링 중 오류:', error);\n            return [];\n        }\n    }\n\n    calculateSalesData(data) {\n        try {\n            let totalSales = 0;\n            let orderCount = 0;\n            const uniqueCustomers = new Set();\n            const validOrders = [];\n\n            data.forEach(item => {\n                if (CONFIG.SALES.ZERO_SALES_STATUSES.includes(item.orderStatus)) {\n                    return;\n                }\n\n                validOrders.push(item);\n                const quantity = parseInt(item.quantity) || 0;\n                \n                // 원본 데이터로만 매핑 검색\n                const originalProduct = item.originalProduct || item.productName || '';\n                const originalOption = item.originalOption || item.option || item.optionInfo || '';\n                \n                const mappingInfo = this.dataService.mappingService.getMappedProductInfo(\n                    originalProduct,\n                    originalOption,\n                    item.channel || item.seller\n                );\n\n                const price = mappingInfo?.price || 0;\n                const sales = quantity * price;\n\n                totalSales += sales;\n                orderCount++;\n                if (item.customerName) {\n                    uniqueCustomers.add(item.customerName);\n                }\n            });\n\n            return {\n                총매출: totalSales,\n                구매건수: orderCount,\n                구매자수: uniqueCustomers.size,\n                계산된행수: validOrders.length,\n                제외된행수: data.length - validOrders.length\n            };\n        } catch (error) {\n            console.error('매출 데이터 계산 중 오류:', error);\n            return { 총매출: 0, 구매건수: 0, 구매자수: 0, 계산된행수: 0, 제외된행수: 0 };\n        }\n    }\n\n    setupEventListeners() {\n        try {\n            const tabButtons = document.querySelectorAll('.tab-button');\n            tabButtons.forEach(button => {\n                button.addEventListener('click', async (e) => {\n                    const tabId = e.target.dataset.tab;\n                    await this.switchTab(tabId);\n                });\n            });\n\n            const loginForm = document.getElementById('loginForm');\n            if (loginForm) {\n                loginForm.addEventListener('submit', async (e) => {\n                    e.preventDefault();\n                    await this.handleLogin();\n                });\n            }\n        } catch (error) {\n            console.error('이벤트 리스너 설정 중 오류:', error);\n        }\n    }\n\n    initializeDatePicker() {\n        const dateRangePicker = document.getElementById('dateRangePicker');\n        if (!dateRangePicker) {\n            console.error('날짜 선택기를 찾을 수 없습니다');\n            return;\n        }\n\n        // flatpickr 초기화\n        this.datePicker = flatpickr(dateRangePicker, {\n            mode: 'range',\n            dateFormat: 'Y. m. d.',\n            locale: 'ko',\n            defaultDate: [new Date().setDate(1), new Date()],\n            onChange: async (selectedDates) => {\n                if (selectedDates.length === 2) {\n                    const [start, end] = selectedDates;\n                    await this.handleDateSelection('custom', start, end);\n                }\n            }\n        });\n    }\n\n    initializeDateButtons() {\n        const buttons = {\n            'today': document.querySelector('[data-period=\"today\"]'),\n            'yesterday': document.querySelector('[data-period=\"yesterday\"]'),\n            'this-week': document.querySelector('[data-period=\"this-week\"]'),\n            'last-week': document.querySelector('[data-period=\"last-week\"]'),\n            'this-month': document.querySelector('[data-period=\"this-month\"]'),\n            'last-month': document.querySelector('[data-period=\"last-month\"]'),\n            'last-3-months': document.querySelector('[data-period=\"last-3-months\"]'),\n            'last-6-months': document.querySelector('[data-period=\"last-6-months\"]'),\n            'all': document.querySelector('[data-period=\"all\"]')\n        };\n\n        // 저장된 기간 설정 복원\n        const savedPeriod = localStorage.getItem('selectedPeriod') || 'this-month';\n\n        Object.entries(buttons).forEach(([period, button]) => {\n            if (button) {\n                button.addEventListener('click', () => {\n                    this.handleDateSelection(period);\n                    this.updateDateButtonStates(button);\n                });\n\n                // 저장된 기간에 해당하는 버튼 활성화\n                if (period === savedPeriod) {\n                    this.updateDateButtonStates(button);\n                }\n            }\n        });\n    }\n\n    updateDateButtonStates(activeButton) {\n        // 모든 날짜 버튼 찾기\n        const dateButtons = document.querySelectorAll('.date-selector');\n        \n        // 모든 버튼의 활성화 상태 제거\n        dateButtons.forEach(button => {\n            button.classList.remove('active');\n        });\n        \n        // 클릭된 버튼 활성화\n        if (activeButton) {\n            activeButton.classList.add('active');\n        }\n    }\n\n    async activateTab(tabId, data = null) {\n        try {\n            document.querySelectorAll('.tab-button').forEach(button => {\n                button.classList.remove('active');\n            });\n\n            const selectedButton = document.querySelector(`.tab-button[data-tab=\"${tabId}\"]`);\n            if (selectedButton) {\n                selectedButton.classList.add('active');\n            }\n\n            document.querySelectorAll('.tab-content').forEach(content => {\n                content.style.display = 'none';\n            });\n\n            const tabMapping = {\n                'dashboard': 'dashboardTab',\n                'detailData': 'detailDataTab'\n            };\n\n            const contentId = tabMapping[tabId] || `${tabId}Tab`;\n            const tabContent = document.getElementById(contentId);\n            \n            if (tabContent) {\n                tabContent.style.display = 'block';\n            } else {\n                return;\n            }\n\n            const currentData = data || this.dataService.getCurrentData();\n\n            switch (tabId) {\n                case 'dashboard':\n                    if (this.dashboard) {\n                        await this.dashboard.updateDashboard(currentData);\n                    }\n                    break;\n\n                case 'detailData':\n                    if (this.tableManager) {\n                        await this.tableManager.updateTables(currentData);\n                    }\n                    break;\n            }\n        } catch (error) {\n            console.error('탭 활성화 중 오류:', error);\n        }\n    }\n\n    async updateAdditionalInfo() {\n        try {\n            // 구독자 수 업데이트\n            const subscriberNumber = document.getElementById('subscriber-number');\n            const updateTime = document.getElementById('update-time');\n            \n            if (subscriberNumber && updateTime) {\n                // 구독자 수 데이터 가져오기 (예시)\n                const subscriberCount = await this.dataService.getSubscriberCount();\n                subscriberNumber.textContent = FormatUtils.formatNumber(subscriberCount);\n                updateTime.textContent = new Date().toLocaleString();\n            }\n\n            // 정보 테이블 업데이트\n            const infoTable = document.getElementById('info-table');\n            if (infoTable) {\n                const infoData = await this.dataService.getAdditionalInfo();\n                // 테이블 데이터 업데이트 로직\n                this.updateInfoTable(infoData);\n            }\n        } catch (error) {\n            console.error('추가 정보 업데이트 중 오류:', error);\n        }\n    }\n\n    async updateAllTabs(data) {\n        // 현재 활성화된 탭 찾기\n        const activeTab = document.querySelector('.tab-button.active');\n        if (activeTab) {\n            const tabId = activeTab.dataset.tab;\n            await this.activateTab(tabId, data);\n        }\n    }\n\n    async updateTabContent(tabId, data) {\n        try {\n            const mappedId = this.TAB_MAPPING[tabId] || tabId;\n\n            switch (mappedId) {\n                case this.TAB_IDS.DASHBOARD:\n                    if (this.dashboard) {\n                        await this.dashboard.updateDashboard(data);\n                    }\n                    break;\n                case this.TAB_IDS.DETAIL_DATA:\n                    if (this.tableManager) {\n                        await this.tableManager.updateTables(data);\n                    }\n                    break;\n                case this.TAB_IDS.ORDER:\n                    if (this.orderManager) {\n                        await this.orderManager.initialize();\n                    }\n                    break;\n            }\n        } catch (error) {\n            console.error(`탭 컨텐츠 업데이트 중 오류:`, error);\n        }\n    }\n\n    initDetailDataSort() {\n        const table = document.querySelector('#detailDataTable');\n        if (!table) return;\n\n        table.querySelectorAll('th').forEach(header => {\n            const sortButton = header.querySelector('.sort-button');\n            if (sortButton) {\n                sortButton.addEventListener('click', () => {\n                    const column = sortButton.getAttribute('data-sort');\n                    this.sortDetailData(column);\n                });\n            }\n        });\n    }\n\n    sortDetailData(column) {\n        const data = this.dataService.getProcessedData();\n        const sortedData = [...data].sort((a, b) => {\n            if (column === 'date') {\n                return new Date(a.date) - new Date(b.date);\n            }\n            if (column === 'quantity' || column === 'originalSales') {\n                return (a[column] || 0) - (b[column] || 0);\n            }\n            return (a[column] || '').localeCompare(b[column] || '');\n        });\n        this.updateDetailDataTab(sortedData);\n    }\n\n    initDetailDataFilters() {\n        const filterInputs = document.querySelectorAll('.detail-data-filter');\n        filterInputs.forEach(input => {\n            input.addEventListener('input', () => {\n                this.filterDetailData();\n            });\n        });\n    }\n\n    filterDetailData() {\n        const data = this.dataService.getProcessedData();\n        const filters = {};\n        \n        document.querySelectorAll('.detail-data-filter').forEach(input => {\n            const column = input.getAttribute('data-filter');\n            const value = input.value.toLowerCase();\n            if (value) {\n                filters[column] = value;\n            }\n        });\n\n        const filteredData = data.filter(item => {\n            return Object.entries(filters).every(([column, value]) => {\n                return String(item[column] || '').toLowerCase().includes(value);\n            });\n        });\n\n        this.updateDetailDataTab(filteredData);\n    }\n\n    initExportButton() {\n        const exportButton = document.getElementById('exportDetailData');\n        if (exportButton) {\n            exportButton.addEventListener('click', () => {\n                this.exportDetailData();\n            });\n        }\n    }\n\n    exportDetailData() {\n        const data = this.dataService.getProcessedData();\n        const csv = this.convertToCSV(data);\n        const blob = new Blob(['\\uFEFF' + csv], { type: 'text/csv;charset=utf-8;' });\n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(blob);\n        link.download = `detail_data_${new Date().toISOString().split('T')[0]}.csv`;\n        link.click();\n    }\n\n    convertToCSV(data) {\n        const headers = ['날짜', '판매처', '주문번호', '상품명', '옵션', '수량', '매출', '주문상태', '구매자명', '연락처', '배송지', '택배사', '운송장번호', '메모'];\n        const rows = data.map(item => [\n            item.date,\n            item.seller || '',\n            item.orderNumber || '',\n            item.mappingStatus === 'mapped' ? item.productName : item.originalProduct,\n            item.mappingStatus === 'mapped' ? item.option : (item.optionInfo || item.optionName || ''),\n            item.quantity,\n            item.price,\n            item.orderStatus || '',\n            item.customerName || '',\n            item.customerContact || '',\n            item.shippingAddress || '',\n            item.deliveryCompany || '',\n            item.trackingNumber || '',\n            item.memo || ''\n        ]);\n        return [headers, ...rows].map(row => row.join(',')).join('\\n');\n    }\n\n    async activateThisMonth() {\n        const thisMonthButton = document.querySelector('[data-period=\"this-month\"]');\n        if (thisMonthButton) {\n            document.querySelectorAll('.date-selector').forEach(btn => {\n                btn.classList.remove('active');\n            });\n            thisMonthButton.classList.add('active');\n            await this.handleDateSelection('this-month');\n        }\n    }\n\n    initializeTabs() {\n        const tabs = document.querySelectorAll('.tab-button');\n        tabs.forEach(tab => {\n            tab.addEventListener('click', async (e) => {\n                const tabId = e.target.getAttribute('data-tab');\n                await this.switchTab(tabId);\n            });\n        });\n    }\n\n    async switchTab(tabId) {\n        try {\n            const mappedId = this.TAB_MAPPING[tabId] || tabId;\n\n            // 모든 탭 컨텐츠 숨기기\n            document.querySelectorAll('.tab-content').forEach(content => {\n                content.style.display = 'none';\n            });\n\n            // 모든 탭 버튼 비활성화\n            document.querySelectorAll('.sidebar-menu-item').forEach(button => {\n                button.classList.remove('active');\n            });\n\n            // 선택된 탭 버튼 활성화\n            const selectedButton = document.querySelector(`[data-tab=\"${mappedId}\"]`);\n            if (selectedButton) {\n                selectedButton.classList.add('active');\n            }\n\n            // 선택된 탭 컨텐츠 표시\n            const selectedContent = document.getElementById(mappedId);\n            if (selectedContent) {\n                selectedContent.style.display = 'block';\n\n                // 상세 데이터 탭이 선택된 경우\n                if (mappedId === this.TAB_IDS.DETAIL_DATA) {\n                    console.log('상세 데이터 탭 선택됨');\n                    // 데이터 로드\n                    const data = await this.dataService.loadDetailData();\n                    const processedData = await this.dataService.processData(data);\n                    this.dataService.setCurrentData(processedData);\n                    \n                    // 테이블 업데이트\n                    if (this.tableManager) {\n                        console.log('테이블 업데이트 시작');\n                        await this.tableManager.updateTables(processedData);\n                    } else {\n                        console.error('TableManager가 초기화되지 않았습니다.');\n                    }\n                }\n                \n                // 발주 탭이 선택된 경우\n                if (mappedId === this.TAB_IDS.ORDER && this.orderManager) {\n                    await this.orderManager.initialize();\n                }\n                \n                // 자금 관리 탭이 선택된 경우\n                if (mappedId === this.TAB_IDS.CASH_FLOW && window.cashFlowManager) {\n                    await window.cashFlowManager.initialize();\n                }\n\n                // 매출 현황 탭이 선택된 경우\n                if (mappedId === this.TAB_IDS.TOTAL_SALES && this.totalSales) {\n                    await this.totalSales.updateSalesData();\n                }\n            }\n\n            // localStorage에서 저장된 기간 설정 가져오기\n            const savedPeriod = localStorage.getItem('selectedPeriod') || 'this-month';\n            const customStartDate = localStorage.getItem('customStartDate');\n            const customEndDate = localStorage.getItem('customEndDate');\n\n            // 저장된 기간으로 버튼 상태 업데이트\n            this.updateDateButtonStates(document.querySelector(`[data-period=\"${savedPeriod}\"]`));\n\n            // 저장된 기간으로 데이터 필터링\n            if (savedPeriod === 'custom' && customStartDate && customEndDate) {\n                await this.handleDateSelection(savedPeriod, customStartDate, customEndDate);\n            } else {\n                await this.handleDateSelection(savedPeriod);\n            }\n\n        } catch (error) {\n            console.error('탭 전환 중 오류 발생:', error);\n        }\n    }\n\n    initializeSidebar() {\n        const menuItems = document.querySelectorAll('.sidebar-menu-item');\n        menuItems.forEach(item => {\n            item.addEventListener('click', () => {\n                // 기존 활성 메뉴 제거\n                menuItems.forEach(mi => mi.classList.remove('active'));\n                // 클릭된 메뉴 활성화\n                item.classList.add('active');\n\n                // 탭 전환\n                const tabId = item.getAttribute('data-tab');\n                this.switchTab(tabId);\n            });\n        });\n\n        // 모바일 메뉴 토글\n        const menuToggle = document.querySelector('.mobile-menu-toggle');\n        const sidebar = document.querySelector('.sidebar');\n        if (menuToggle && sidebar) {\n            menuToggle.addEventListener('click', () => {\n                sidebar.classList.toggle('active');\n            });\n        }\n    }\n}\n\n// App 인스턴스 생성 및 초기화\nlet appInitialized = false;\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (appInitialized) return;\n    \n    try {\n        if (window.app) {\n            window.app.destroy();\n        }\n        window.app = new App();\n        appInitialized = true;\n    } catch (error) {\n        console.error('App 초기화 중 오류:', error);\n    }\n});\n\nwindow.App = App;\n\nconst cashFlowManager = new CashFlowManager();\n\n// 탭 전환 로직에 자금관리 탭 추가\nfunction switchTab(tabName) {\n    // 기존 탭 숨기기\n    document.querySelectorAll('.tab-content').forEach(tab => {\n        tab.style.display = 'none';\n    });\n    \n    // 선택된 탭 보이기\n    document.getElementById(`${tabName}Container`).style.display = 'block';\n}"],"names":["firebaseConfig","appConfig","app","initializeApp","auth","getAuth","db","getFirestore","enableIndexedDbPersistence","err","path","collection","id","doc","getDocs","addDoc","deleteDoc","serverTimestamp","writeBatch","AuthService","_a","callback","user","email","password","userCredential","error","urlParams","authService","DateUtils","period","today","startDate","endDate","date","targetDate","data","start","end","item","itemDate","FormatUtils","amount","number","value","decimals","MappingService","dataService","product","option","response","row","originalProduct","originalOption","key","seller","mappedInfo","productName","optionName","channel","channelMapping","mapping","DataService","resolve","reject","rows","parsed","sales","commission","loadType","smartstoreResponse","ohouseResponse","ohouse2Response","ytshoppingResponse","validateData","smartstoreData","_b","ohouseData","_c","ohouse2Data","_d","ytshoppingData","_e","rawData","mode","filteredData","quantity","orderNumber","orderDate","customerName","customerContact","orderStatus","dateStr","year","month","day","feeRate","fees","fee","currentData","selectedDate","databaseId","baseUrl","NotionService","isLocal","TableManager","existingTable","table","thead","tbody","searchContainer","searchInput","e","tr","searchTerm","searchLower","text","num","Dashboard","tabId","dateRangePicker","formattedStart","formattedEnd","activeTab","currentSalesData","previousSalesData","growthRates","previousStart","previousEnd","daysDiff","previousData","current","previous","calculateRate","curr","prev","salesData","growthElements","amountElements","comparePeriodElements","element","comparePeriodText","elementId","growthRate","formatFunction","valueElement","growthId","formattedValue","growthElement","amountId","amountElement","previousValue","difference","formattedGrowth","formattedDiff","growthClass","currentValue","formatDate","formatMonth","yesterday","twoDaysAgo","lastWeekEnd","lastWeekStart","twoWeeksAgoEnd","twoWeeksAgoStart","lastMonth","twoMonthsAgo","threeMonthsAgo","compareEnd","compareStart","sixMonthsAgo","rate","totalSales","sum","validOrders","purchaseCount","uniqueCustomers","name","contact","salesByChannel","acc","customerId","d","button","btn","canvas","dateKey","monday","mappingInfo","price","sortedDates","datasets","tooltipItems","result","salesItems","orderItem","context","dayOfWeekData","dayIndex","dayNames","salesDatasets","orderDataset","totalSalesByDay","config","avgSales","dailyTotals","dayOfWeek","channelTotals","sortedData","a","b","groupedData","mondayOffset","weekStart","weekEnd","dateA","dateB","parts","currentYear","channelSales","sortedChannels","container","ratio","productSales","displayProduct","sortedProducts","dates","kstDate","periodChartCanvas","dayOfWeekCanvas","customStartDate","customEndDate","datePicker","existingShowMoreContainer","totalProfit","totalOperatingProfit","commissionSnapshot","commissionData","cost","profit","commissionKey","commissionRates","commissionRate","operatingProfit","tableElement","initialDisplayCount","isCurrentlyExpanded","index","marginRate","operatingMarginRate","totalRow","showMoreContainer","existingShowMore","showMoreButton","isExpanded","channelData","channelSalesBody","percentage","isEditing","_f","editBtn","saveBtn","addBtn","editBtnBottom","saveBtnBottom","addBtnBottom","toggleEditMode","batch","inputs","docId","docRef","newRow","addNewRow","el","monthlyData","monthKey","total","monthNum","detailRow","storeSales","groupSales","periodButtonsContainer","orderContainer","customerPurchases","orderGroups","order","customer","stats","repurchaseStats","totalCustomers","category","mainRow","toggleBtn","icon","customerList","repurchaseCount","repurchaseRate","customers","sortedOrders","sortButtons","sortType","currentSort","newSort","sortedCustomers","aDate","bDate","salesByProduct","mappedProduct","mappedKey","OrderManager","processedData","groups","page","props","_g","_h","_i","_j","_k","_l","_m","_n","_p","_o","orderCode","_r","_q","발주명","_u","_t","_s","발주차수","_w","_v","_y","_x","_A","_z","_B","_C","_D","_E","_F","_G","_H","_I","_J","_K","_M","_L","_O","_N","_Q","_P","선금원화환산","잔금원화환산","status","count","차수","선금원화","잔금원화","filteredOrders","html","rowStartIndex","rowEndIndex","rowIndex","i","rowOrder","cards","card","detailsContainer","cardDetails","otherCard","otherIcon","dc","details","cardRect","scrollTarget","원화환산액","입항후비용","제품원가","dateFilter","dateRangeInput","customDateRange","selectedValue","selectedDates","filter","now","CashFlowManager","summaryData","summarySection","chartSection","transactionList","summary","type","section","ctx","Chart","categoryData","monthlyTotals","sortedMonths","categoryTotals","TotalSales","yearButtons","monthlySales","storeData","totalStoreSales","totalAdSales","totalGroupSales","detailCell","adData","groupData","adSales","ad","group","dateProperty","storeSalesData","adSalesData","groupSalesData","App","thisMonthButton","loadingIndicator","dateRange","orderCount","loginForm","buttons","savedPeriod","activeButton","selectedButton","content","contentId","tabContent","subscriberNumber","updateTime","subscriberCount","infoData","header","sortButton","column","input","filters","exportButton","csv","blob","link","headers","tab","mappedId","selectedContent","menuItems","mi","menuToggle","sidebar","appInitialized"],"mappings":"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"}